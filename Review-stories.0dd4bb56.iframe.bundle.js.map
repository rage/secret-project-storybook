{"version":3,"file":"Review-stories.0dd4bb56.iframe.bundle.js","mappings":";;;;;;;;;;AAoBA;;;;AAIA;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;ACoBA;;;AClDA;;;;;;AAOA;;;;;;;AAUA;;;;;;AAMA;;;;;AAKA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;AAkBA","sources":["webpack://shared-module/./src/components/PeerReview/Review.tsx","webpack://shared-module/./src/components/InputFields/TextAreaField.tsx","webpack://shared-module/./src/components/PeerReview/LikertScale.tsx"],"sourcesContent":["import styled from \"@emotion/styled\"\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { primaryFont } from \"../../styles/typography\"\nimport TextArea from \"../InputFields/TextAreaField\"\n\nimport LikertScale from \"./LikertScale\"\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n  max-width: 1000px;\n\n  .comment {\n    display: inline-block;\n    font-size: 20px;\n    margin-bottom: 10px;\n    color: #1a2333;\n  }\n`\nconst StyledInstruction = styled.div`\n  margin-bottom: 3rem;\n\n  .instruction {\n    font-family: ${primaryFont};\n    margin-bottom: 5px;\n  }\n\n  .instruction-text {\n    font-size: 18px;\n    line-height: 24px;\n    color: #313947;\n  }\n`\nconst INSTRUCTION_TEXT = `Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has\nbeen the industrys standard dummy text ever since the 1500s, when an unknown printer took\na galley of type and scrambled.`\n\nconst GENERAL_COMMENTS = \"General comments\"\n\nconst EXAMPLE_QUESTION = \"Example question\"\n\nexport type ReviewComponentProps = React.HTMLAttributes<HTMLDivElement>\n\nconst Review: React.FC<\n  React.PropsWithChildren<React.PropsWithChildren<ReviewComponentProps>>\n> = () => {\n  const { t } = useTranslation()\n  return (\n    <Wrapper>\n      <StyledInstruction>\n        <h3 className=\"instruction\">{t(\"instruction\")}</h3>\n        <p className=\"instruction-text\">{INSTRUCTION_TEXT}</p>\n      </StyledInstruction>\n\n      <span className=\"comment\">{GENERAL_COMMENTS}</span>\n      <TextArea placeholder={t(\"write-a-review\")} onChange={() => null}></TextArea>\n      <LikertScale\n        question={EXAMPLE_QUESTION}\n        answerRequired={false}\n        selectedOption={null}\n        setSelectedOption={function (_value: number | null): void {\n          // NOP\n        }}\n      />\n    </Wrapper>\n  )\n}\n\nexport default Review\n","import { css, cx } from \"@emotion/css\"\nimport React, { useEffect, useRef } from \"react\"\nimport { UseFormRegisterReturn } from \"react-hook-form\"\n\ninterface TextAreaExtraProps {\n  label?: string\n  name?: string\n  errorMessage?: string\n  placeholder?: string\n  required?: boolean\n  value?: string\n  disabled?: boolean\n  maxlength?: string\n  onChange?: (value: string, name?: string) => void\n  className?: string\n  defaultValue?: string\n  autoResize?: boolean\n  register?: UseFormRegisterReturn\n}\n\ntype TextAreaProps = Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, \"onChange\"> &\n  TextAreaExtraProps\n\nfunction updateHeight(ref: React.RefObject<HTMLTextAreaElement>) {\n  if (ref.current) {\n    // eslint-disable-next-line i18next/no-literal-string\n    ref.current.style.height = \"auto\"\n    // eslint-disable-next-line i18next/no-literal-string\n    ref.current.style.height = `${ref.current.scrollHeight + 5}px`\n  }\n}\n\nconst TextAreaField = ({ onChange, className, autoResize, register, ...rest }: TextAreaProps) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n\n  useEffect(() => {\n    // This auto-resizes the textarea if the feature is enabled\n    if (!autoResize || !textareaRef.current) {\n      return\n    }\n    updateHeight(textareaRef)\n  }, [rest.value, autoResize])\n  return (\n    <div\n      className={cx(\n        css`\n          margin-bottom: 1rem;\n\n          label {\n            display: grid;\n\n            textarea {\n              background: #fcfcfc;\n              border: 1.6px solid #dedede;\n              padding: 10px 12px;\n            }\n\n            span {\n              color: #333;\n              font-size: 14px;\n              font-weight: 500;\n              margin-bottom: 0.2rem;\n            }\n          }\n        `,\n        className,\n      )}\n    >\n      <label>\n        <span>{rest.label}</span>\n        <textarea\n          ref={textareaRef}\n          onChange={({ target: { value, name } }) => {\n            if (onChange) {\n              onChange(value, name)\n            }\n\n            if (autoResize) {\n              updateHeight(textareaRef)\n            }\n          }}\n          {...register}\n          /* onKeyPress={(event) => onKeyPress(event)} */\n          defaultValue={rest.defaultValue}\n          {...rest}\n        />\n      </label>\n    </div>\n  )\n}\n\nexport default TextAreaField\n","import styled from \"@emotion/styled\"\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport Agree from \"../../img/likert/agree.svg\"\nimport Disagree from \"../../img/likert/disagree.svg\"\nimport Neutral from \"../../img/likert/neutral.svg\"\nimport StronglyAgree from \"../../img/likert/stronglyAgree.svg\"\nimport StronglyDisagree from \"../../img/likert/stronglyDisagree.svg\"\n\nconst Wrapper = styled.div`\n  margin: 1.5rem auto;\n  max-width: 1000px;\n`\nconst Question = styled.span`\n  font-size: 22px;\n  margin: 0 auto;\n  margin-bottom: 1rem;\n  display: block;\n  color: #1a2333;\n`\nconst Likerts = styled.div`\n  background: #f9f9f9;\n  min-height: 100px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  margin: 0 auto;\n  max-width: 1000px;\n`\n\n/* eslint-disable i18next/no-literal-string */\nconst Likert = styled.div`\n  width: 150px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 15px 0;\n  background-color: ${({ active }: StyledProps) => (active ? \"#313947\" : \"#f9f9f9\")};\n  cursor: pointer;\n  transition: all 0.2s;\n\n  svg .bg {\n    fill: ${({ active }) => active && \"#ffd93b\"};\n  }\n\n  svg {\n    margin-top: 10px;\n    margin-bottom: 5px;\n  }\n\n  &:hover {\n    background: ${({ active }: StyledProps) => (active ? \"#313947\" : \"#babdc2\")};\n    svg .bg {\n      fill: #ffd93b;\n    }\n  }\n\n  .likert-scale-text {\n    margin-top: 6px;\n    font-size: 15px;\n    font-weight: 500;\n    color: ${({ active }) => (active ? \"#ffffff\" : \"#313947\")};\n    text-align: center;\n    line-height: 1.2;\n  }\n`\n\ninterface LikertScaleProps {\n  disabled?: boolean\n  question: string\n  answerRequired: boolean\n  selectedOption: number | null\n  setSelectedOption: (value: number | null) => void\n}\n\ninterface StyledProps {\n  active: boolean\n}\n\nconst LikertScale: React.FC<React.PropsWithChildren<React.PropsWithChildren<LikertScaleProps>>> = ({\n  disabled,\n  question,\n  answerRequired,\n  selectedOption,\n  setSelectedOption,\n}) => {\n  const { t } = useTranslation()\n\n  const arr = [\n    {\n      text: t(\"likert-scale-strongly-disagree\"),\n      image: <StronglyDisagree />,\n    },\n    {\n      text: t(\"likert-scale-disagree\"),\n      image: <Disagree />,\n    },\n    {\n      text: t(\"likert-scale-neither-agree-nor-disagree\"),\n      image: <Neutral />,\n    },\n    {\n      text: t(\"likert-scale-agree\"),\n      image: <Agree />,\n    },\n    {\n      text: t(\"likert-scale-strongly-agree\"),\n      image: <StronglyAgree />,\n    },\n  ]\n\n  return (\n    <Wrapper>\n      <Question>\n        {question}\n        {answerRequired && \" *\"}\n      </Question>\n\n      <Likerts>\n        {arr.map((option, n) => (\n          <Likert\n            key={n + 1}\n            onClick={() => {\n              if (!disabled) {\n                setSelectedOption(n + 1)\n              }\n            }}\n            active={selectedOption === n + 1}\n          >\n            {option.image}\n            <p className=\"likert-scale-text\">{option.text}</p>\n          </Likert>\n        ))}\n      </Likerts>\n    </Wrapper>\n  )\n}\nLikertScale.defaultProps = { disabled: false }\n\nexport default LikertScale\n"],"names":[],"sourceRoot":""}