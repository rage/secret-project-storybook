{"version":3,"file":"Navigation-stories.c5543122.iframe.bundle.js","mappings":";;;AA+CA;AACA;AACA;;;;AAIA;AACA;;;;;;AAMA;;;;AAIA;;AAKA;;AAEA;;;;AAIA;AACA;;;;AAIA;;;;AAKA;AACA;;;AAGA;;AAEA;AACA;AAqDA;AACA;;;;;;;;;AASA;;;;AAMA;AAwCA;AACA;;;AAKA;;AChMA;;;;;;;;;;;;;;;;;;;;;;;;AC4BA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;AAOA;AACA;;;;;;;;;;;AAWA;;;;;;AAQA;;;;AAIA;;;;AAMA;;;;;;;;;;;;;;;;;;AAkBA;;AAEA;;;;;;;;;;;AAaA;AACA;;;;;;;;;;;;;;;AAeA;;;;;AAKA;;;;;;;AAOA;;;;;;AAMA;;AAEA;;;;;;;;;;;AAWA;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;AASA;AACA;;;AAIA;;;;;;AAMA;;;AAKA;;AAEA;AAGA;;;;;ACjNA;;AAEA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;;AAKA;;;AAKA;;AASA;AA8BA;AACA;;;ACvGA;;;;;;;;ACKA;ACTA;;;;;;;;;;AAUA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;AAmBA;ACzCA;AACA;;;;;;;;;;;;;AAeA;;ACRA;AAGA;;;;;;;;AAQA;AACA;;;AAGA;;;;AAIA;;;AAKA;AACA;;;;AAIA;;;AAKA;ACgLA;AACA;AAGA;AACA;AA1HA;AA8HA;AACA;AAjGA;AAqGA;AACA;AAxEA;AA4EA;AACA;AAjDA;AAqDA;AACA;AA3KA;AA8KA;AACA;AAlKA;AAkLA;AAXA;AAWA","sources":["webpack://shared-module/./src/components/Navigation/NavBar/Menu/Hamburger/HamburgerSpring.tsx","webpack://shared-module/./src/components/Navigation/NavBar/Menu/Hamburger/Hamburger.tsx","webpack://shared-module/./src/components/Navigation/NavBar/ComplexNav.tsx","webpack://shared-module/./src/components/Navigation/NavBar/Menu/Menu.tsx","webpack://shared-module/./src/components/Navigation/NavBar/NavContainer.tsx","webpack://shared-module/./src/components/Navigation/NavBar/NavItems.tsx","webpack://shared-module/./src/components/Navigation/NavBar/NavLink.tsx","webpack://shared-module/./src/components/SkipLink.tsx","webpack://shared-module/./src/components/Navigation/NavBar/SimpleNav.tsx","webpack://shared-module/./src/components/Button.tsx"],"sourcesContent":["// From https://github.com/AuvikAlive/react-animated-burgers/tree/master/src/lib/components/HamburgerSpring\n\nimport styled from \"@emotion/styled\"\n\n// eslint-disable-next-line i18next/no-literal-string\nconst getBarColor = ({ barColor }: { barColor: BarColor }) => `background-color: ${barColor};`\nconst getLayerHeight = (buttonWidth: ButtonWidth) => buttonWidth * 0.1\nconst getLayerSpacing = (buttonWidth: ButtonWidth) => buttonWidth * 0.15\n\nconst active = `\n  transition-delay: 0.22s;\n  background-color: transparent;\n`\n\n// eslint-disable-next-line i18next/no-literal-string\nconst getActiveBefore = (buttonWidth: ButtonWidth) => `\n  top: 0;\n  transition: top 0.1s 0.15s cubic-bezier(0.33333, 0, 0.66667, 0.33333), transform 0.13s 0.22s cubic-bezier(0.215, 0.61, 0.355, 1);\n  transform: translate3d(0, ${\n    getLayerHeight(buttonWidth) + getLayerSpacing(buttonWidth)\n  }px, 0) rotate(45deg);\n`\n\n// eslint-disable-next-line i18next/no-literal-string\nconst getActiveAfter = (buttonWidth: ButtonWidth) => `\n  top: 0;\n  transition: top 0.2s cubic-bezier(0.33333, 0, 0.66667, 0.33333), transform 0.13s 0.22s cubic-bezier(0.215, 0.61, 0.355, 1);\n  transform: translate3d(0, ${\n    getLayerHeight(buttonWidth) + getLayerSpacing(buttonWidth)\n  }px, 0) rotate(-45deg);\n`\n\n// eslint-disable-next-line i18next/no-literal-string\nconst getLinesCommon = ({ buttonWidth }: { buttonWidth: ButtonWidth }) => `\n  width: ${buttonWidth}px;\n  height: ${buttonWidth * 0.1}px;\n  border-radius: ${buttonWidth * 0.1}px;\n  position: absolute;\n  transition-property: transform;\n  transition-duration: 0.15s;\n  transition-timing-function: ease;\n`\n\n// eslint-disable-next-line i18next/no-literal-string\nconst StyledLines = styled.span<LineProps>`\n  display: block;\n  top: 50%;\n  margin-top: ${({ buttonWidth }) => -buttonWidth * 0.05}px;\n  ${getBarColor}\n  ${getLinesCommon}\n\n  &::before,\n  &::after {\n    ${getBarColor}\n    ${getLinesCommon}\n    content: \"\";\n    display: block;\n  }\n\n  &::before {\n    top: ${({ buttonWidth }) => -buttonWidth * 0.25}px;\n  }\n\n  &::after {\n    bottom: ${({ buttonWidth }) => -buttonWidth * 0.25}px;\n  }\n`\n\n// eslint-disable-next-line i18next/no-literal-string\nconst StyledLinesSpring = styled(StyledLines)`\n  &::before {\n    top: ${({ buttonWidth }) => getLayerHeight(buttonWidth) + getLayerSpacing(buttonWidth)}px;\n    transition:\n      top 0.1s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1),\n      transform 0.13s cubic-bezier(0.55, 0.055, 0.675, 0.19);\n    ${({ isActive, buttonWidth }) => isActive && getActiveBefore(buttonWidth)}\n    ${getBarColor}\n  }\n\n  &::after {\n    top: ${({ buttonWidth }) =>\n      2 * getLayerHeight(buttonWidth) + 2 * getLayerSpacing(buttonWidth)}px;\n    transition:\n      top 0.2s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1),\n      transform 0.13s cubic-bezier(0.55, 0.055, 0.675, 0.19);\n    ${({ isActive, buttonWidth }) => isActive && getActiveAfter(buttonWidth)}\n    ${getBarColor}\n  }\n\n  top: ${({ buttonWidth }) => getLayerHeight(buttonWidth)}px;\n  transition: background-color 0s 0.13s linear;\n  ${getBarColor}\n  ${({ isActive }) => isActive && active}\n`\n\ntype BarColor = string\ntype ButtonColor = string\ntype ButtonWidth = number\ntype IsActive = boolean\n\ntype ButtonProps = {\n  /**\n   * Color of the bars, default 'black'\n   */\n  barColor?: BarColor\n  /**\n   * Component to use as the box\n   */\n  Box?: React.ElementType\n  /**\n   * Color of the button, default 'transparent'\n   */\n  buttonColor?: ButtonColor\n  /**\n   * Width of the button, default 40\n   */\n  buttonWidth?: ButtonWidth\n  /**\n   * ClassName for the button\n   */\n  className?: string\n  /**\n   * Specifies if the button is active or not, default false\n   */\n  isActive?: IsActive\n  /**\n   * Component to use as the bar lines\n   */\n  Lines?: React.ElementType\n  /**\n   * Callback to invoke on button click to toggle active state, default () => {}\n   */\n  toggleButton?: () => void\n  /**\n   * id to differirentiate Hamburger menus from each other, needed for accesibility\n   */\n  buttonId?: string\n}\n\ntype StyledButtonProps = {\n  buttonWidth: ButtonWidth\n  buttonColor: ButtonColor\n}\n\n// eslint-disable-next-line i18next/no-literal-string\nconst StyledButton = styled.div<StyledButtonProps>`\n  padding: ${({ buttonWidth }) => buttonWidth * 0.375}px;\n  display: inline-block;\n  cursor: pointer;\n  transition-property: opacity, filter;\n  transition-duration: 0.15s;\n  transition-timing-function: linear;\n  font: inherit;\n  color: inherit;\n  text-transform: none;\n  background-color: ${({ buttonColor }) => buttonColor};\n  margin: 0;\n  border: none;\n  overflow: visible;\n`\n\nconst Button: React.FC<React.PropsWithChildren<React.PropsWithChildren<ButtonProps>>> = (props) => {\n  const {\n    barColor = \"black\",\n    Box = StyledBox,\n    buttonColor = \"transparent\",\n    buttonWidth = 40,\n    className,\n    isActive = false,\n    Lines = StyledLines,\n    toggleButton,\n    buttonId,\n    ...rest\n  } = props\n\n  return (\n    <StyledButton\n      onClick={toggleButton}\n      {...{ buttonWidth, buttonColor, className }}\n      {...rest}\n      id={buttonId}\n    >\n      <Box {...{ buttonWidth }}>\n        <Lines {...{ buttonWidth, barColor, isActive }} />\n      </Box>\n    </StyledButton>\n  )\n}\n\nexport type LineProps = {\n  barColor: BarColor\n  buttonWidth: ButtonWidth\n  isActive: IsActive\n}\n\ntype StyledBoxProps = {\n  buttonWidth: ButtonWidth\n}\n\n// eslint-disable-next-line i18next/no-literal-string\nconst StyledBox = styled.div<StyledBoxProps>`\n  width: ${({ buttonWidth }) => buttonWidth}px;\n  height: ${({ buttonWidth }) => buttonWidth * 0.6}px;\n  display: inline-block;\n  position: relative;\n`\n\nexport const HamburgerSpring: React.FC<\n  React.PropsWithChildren<React.PropsWithChildren<ButtonProps>>\n> = (props) => <Button {...props} Lines={StyledLinesSpring} />\n","import { css, cx } from \"@emotion/css\"\n\nimport { HamburgerSpring } from \"./HamburgerSpring\"\n\nconst defaultPadding = css`\n  padding: 0;\n`\n\ninterface HamburgerProps {\n  isActive: boolean\n  toggleButton: () => void\n  buttonId: string\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst Hamburger: React.FC<React.PropsWithChildren<React.PropsWithChildren<HamburgerProps>>> = ({\n  isActive,\n  toggleButton,\n  buttonId,\n}) => {\n  return (\n    <HamburgerSpring\n      barColor=\"#333\"\n      buttonWidth={30}\n      {...{ isActive, toggleButton, buttonId }}\n      className={buttonId === \"main-navigation-menu\" ? cx(defaultPadding) : undefined}\n    />\n  )\n}\n\nexport default Hamburger\n","import { css, cx, keyframes } from \"@emotion/css\"\nimport styled from \"@emotion/styled\"\nimport { faFingerprint } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport React, { useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { baseTheme } from \"../../../styles\"\nimport { respondToOrLarger } from \"../../../styles/respond\"\nimport { runCallbackIfEnterPressed } from \"../../../utils/accessibility\"\nimport Button from \"../../Button\"\nimport LoginControls from \"../../LoginControls\"\n\nimport Hamburger from \"./Menu/Hamburger/Hamburger\"\n\nimport { NavigationProps } from \".\"\n\nconst swingHorizontal = keyframes`\n15% {\n  transform: translateX(5px);\n}\n\n30% {\n  transform: translateX(-5px);\n}\n\n50% {\n  transform: translateX(3px);\n}\n\n65% {\n  transform: translateX(-3px);\n}\n\n80% {\n  transform: translateX(2px);\n}\n\n100% {\n  transform: translateX(0);\n}\n`\n\nconst navbarItems = css`\n  position: relative;\n  display: flex;\n  height: 90px;\n  align-items: center;\n  font-size: 1rem;\n\n  padding: 0em 4em;\n  background: ${baseTheme.colors.clear[100]};\n  border-bottom: 2px solid #333;\n  z-index: 100;\n\n  h1 {\n    margin-bottom: 0;\n  }\n\n  justify-content: flex-end;\n  top: 0;\n  ${respondToOrLarger.lg} {\n    justify-content: space-between;\n    top: auto;\n  }\n`\n\n// eslint-disable-next-line i18next/no-literal-string\nconst navbarLogo = css`\n  color: ${baseTheme.colors.gray[700]};\n  display: flex;\n  justify-self: start;\n  margin: 0;\n  cursor: pointer;\n  padding-left: 10px;\n\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: translate(50%, 100%);\n  ${respondToOrLarger.lg} {\n    position: static;\n    top: auto;\n    left: auto;\n    transform: none;\n  }\n`\n\nconst active = css`\n  left: 0;\n  opacity: 1;\n  transition: all 0.5s ease;\n  ${respondToOrLarger.lg} {\n    left: auto;\n    transition: all;\n  }\n`\n\nconst navMenu = css`\n  display: flex;\n  flex-direction: column;\n  grid-gap: 0;\n  width: 100%;\n  height: auto;\n  position: absolute;\n  top: 90px;\n  left: -100%;\n  text-align: center;\n  align-items: center;\n  margin-top: 0;\n  transition: all 0.5s ease;\n  padding-left: 0;\n  z-index: 9;\n  overflow-y: hidden;\n\n  justify-content: end;\n  background: ${baseTheme.colors.clear[100]};\n\n  ${respondToOrLarger.lg} {\n    display: inline-block;\n    grid-gap: 10px;\n    list-style: none;\n    margin-top: 1em;\n    width: auto;\n    position: static;\n    top: auto;\n    left: auto;\n    transition: none;\n  }\n`\n// eslint-disable-next-line i18next/no-literal-string\nconst navLinks = css`\n  color: ${baseTheme.colors.gray[700]};\n  text-decoration: none;\n  position: relative;\n  line-height: 1.5rem;\n  font-size: 1rem;\n  text-align: center;\n\n  &:after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    transform: scaleX(0);\n    height: 2px;\n    bottom: 0;\n    left: 0;\n    background-color: ${baseTheme.colors.gray[700]};\n    transform-origin: bottom right;\n    transition: transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\n\n    display: none;\n    ${respondToOrLarger.lg} {\n      display: inline-block;\n    }\n  }\n\n  &:hover {\n    text-decoration: none;\n    color: ${baseTheme.colors.gray[700]};\n\n    &:after {\n      transform: scaleX(1);\n      transform-origin: bottom left;\n    }\n    animation: ${swingHorizontal} 1s ease;\n    animation-iteration-count: 1;\n    ${respondToOrLarger.lg} {\n      animation: none 0 ease;\n    }\n  }\n\n  font-weight: 500;\n  margin: 0;\n  width: 100%;\n  padding: 2rem;\n  display: table;\n  border-bottom: 2px solid #f1f1f1;\n  ${respondToOrLarger.lg} {\n    font-weight: 600;\n    margin: 0 0.8rem;\n    width: auto;\n    padding: 0;\n    display: inline-block;\n    border-bottom: 0;\n  }\n`\nconst menuIcon = css`\n  font-size: 1.8rem;\n  z-index: 99;\n  cursor: pointer;\n  height: auto;\n\n  display: block;\n  position: relative;\n  top: -2px;\n  ${respondToOrLarger.lg} {\n    display: none;\n    height: 15px;\n    position: static;\n    top: auto;\n    right: auto;\n    transform: none;\n  }\n`\nconst hide = css`\n  ${respondToOrLarger.lg} {\n    display: none;\n  }\n`\nconst secondaryLink = css`\n  display: none;\n  grid-gap: 10px;\n  list-style: none;\n  text-align: center;\n  align-items: center;\n  ${respondToOrLarger.lg} {\n    display: flex;\n  }\n`\n\nconst StyledIcon = styled(FontAwesomeIcon)`\n  font-size: 1.8rem;\n  color: ${baseTheme.colors.gray[700]};\n`\n\nconst Navigation: React.FC<\n  React.PropsWithChildren<React.PropsWithChildren<NavigationProps>>\n> = () => {\n  const { t } = useTranslation()\n  const [clicked, setClicked] = useState(false)\n  const callback = () => setClicked(!clicked)\n  // eslint-disable-next-line i18next/no-literal-string\n  const buttonId = \"main-navigation-menu\"\n  return (\n    <nav role=\"navigation\" className={cx(navbarItems)}>\n      <div className={cx(navbarLogo)}>\n        <a href=\"/\" aria-label={t(\"home-page\")} role=\"button\">\n          <StyledIcon icon={faFingerprint} aria-label={t(\"home-page\")}></StyledIcon>\n        </a>\n      </div>\n      <div\n        className={cx(menuIcon)}\n        onClick={callback}\n        onKeyDown={(e) => runCallbackIfEnterPressed(e, callback)}\n        tabIndex={0}\n        role=\"button\"\n        aria-label={t(\"open-menu\")}\n      >\n        <Hamburger isActive={clicked} toggleButton={callback} buttonId={buttonId} />\n      </div>\n\n      <ol className={clicked ? cx(navMenu, active) : cx(navMenu)}>\n        <li className={cx(navLinks)}>{t(\"courses\")}</li>\n        <li className={cx(navLinks)}>{t(\"modules\")}</li>\n        <li className={cx(navLinks)}>{t(\"email-templates\")}</li>\n        <LoginControls styles={[navLinks, hide]} currentPagePath=\"/\" />\n        <li className={cx(navLinks, hide)}>\n          <Button variant=\"primary\" size=\"medium\">\n            {t(\"translate\")}\n          </Button>\n        </li>\n      </ol>\n\n      <ol className={cx(secondaryLink)}>\n        <LoginControls styles={[secondaryLink]} currentPagePath=\"/\" />\n        <li>\n          <Button variant=\"primary\" size=\"medium\">\n            {t(\"translate\")}\n          </Button>\n        </li>\n      </ol>\n    </nav>\n  )\n}\n\nexport default Navigation\n","import { css, cx } from \"@emotion/css\"\nimport { ReactNode, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { baseTheme } from \"../../../../styles\"\nimport { runCallbackIfEnterPressed } from \"../../../../utils/accessibility\"\n\nimport Hamburger from \"./Hamburger/Hamburger\"\n\nconst NavMenu = css`\n  padding: 0px;\n  & > * {\n    margin-left: 20px;\n  }\n`\n\n// eslint-disable-next-line i18next/no-literal-string\nconst MenuIcon = css`\n  &:focus-visible {\n    outline: 2px solid ${baseTheme.colors.green[500]};\n    outline-offset: 2px;\n  }\n`\n\n// eslint-disable-next-line i18next/no-literal-string\nconst ToolTip = css`\n  background: #fff;\n  border-color: #cacaca;\n  padding: 0;\n  border-radius: 4px;\n  position: absolute;\n  margin-bottom: 10px;\n  margin-left: -95px;\n  z-index: 901;\n  box-shadow: 0px 0px 5px rgba(51, 51, 51, 0.1);\n\n  li {\n    text-decoration: none;\n\n    border-bottom: 2px solid #e1e1e1;\n    list-style: none;\n    margin: 0;\n    background-color: white;\n\n    &:last-child {\n      border-bottom: none;\n    }\n\n    &:hover {\n      filter: brightness(92%) contrast(110%);\n    }\n\n    Button {\n      text-decoration: none;\n      list-style: none;\n      border: none;\n      margin: 0;\n      padding: 12px 25px;\n      font-size: 16px;\n      background: inherit;\n      text-transform: none;\n      text-align: center;\n      width: 100%;\n      color: ${baseTheme.colors.green[500]};\n    }\n\n    Button:hover {\n      background: inherit;\n      color: ${baseTheme.colors.green[700]};\n    }\n  }\n`\n\nconst Hide = css`\n  display: none;\n`\n\nexport interface MenuProps {\n  variant?: \"top\" | \"bottom\"\n  children: ReactNode\n}\n\nconst Menu: React.FC<React.PropsWithChildren<React.PropsWithChildren<MenuProps>>> = ({\n  children,\n  variant,\n}) => {\n  const [clicked, setClicked] = useState(false)\n  const { t } = useTranslation()\n\n  // eslint-disable-next-line i18next/no-literal-string\n  const buttonId = variant === \"bottom\" ? \"\" : \"main-navigation-menu\"\n  const onClickHandler = () => {\n    setClicked(!clicked)\n  }\n  return (\n    <div className={cx(NavMenu)}>\n      <div\n        className={cx(MenuIcon)}\n        onClick={onClickHandler}\n        onKeyDown={(e) => runCallbackIfEnterPressed(e, onClickHandler)}\n        role=\"button\"\n        aria-label={t(\"open-menu\")}\n        tabIndex={0}\n      >\n        <Hamburger isActive={clicked} toggleButton={onClickHandler} buttonId={buttonId} />\n      </div>\n      <ul\n        className={\n          clicked\n            ? cx(\n                ToolTip,\n                css`\n                  ${variant === \"bottom\" ? \"bottom: 70px;\" : \"top: 70px;right:17px;\"}\n                `,\n              )\n            : cx(Hide)\n        }\n      >\n        {children}\n      </ul>\n    </div>\n  )\n}\n\nexport default Menu\n","import { css } from \"@emotion/css\"\n\nconst NavContainer: React.FC<React.PropsWithChildren<React.PropsWithChildren<unknown>>> = ({\n  children,\n}) => {\n  return (\n    <div\n      className={css`\n        flex-grow: 1;\n        align-items: center;\n      `}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default NavContainer\n","import { css } from \"@emotion/css\"\n\nconst NavItems: React.FC<React.PropsWithChildren<React.PropsWithChildren<unknown>>> = ({\n  children,\n}) => {\n  return (\n    <ul\n      className={css`\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        list-style: none;\n        & > * {\n          margin-left: 20px;\n        }\n      `}\n    >\n      {children}\n    </ul>\n  )\n}\n\nexport default NavItems\n","import { css, cx } from \"@emotion/css\"\n\nimport { baseTheme } from \"../../../styles\"\n\n// eslint-disable-next-line i18next/no-literal-string\nconst NavLinkStyles = css`\n  color: ${baseTheme.colors.gray[700]};\n  font-weight: 600;\n  text-decoration: none;\n  display: inline-block;\n  position: relative;\n  font-size: 1.2rem;\n  line-height: 1.5rem;\n  /* margin: 0.5rem 1.5rem; */\n  outline: none;\n  &:focus-visible {\n    outline: 2px solid ${baseTheme.colors.green[500]};\n    outline-offset: 2px;\n  }\n  /*\n  &:after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    transform: scaleX(0);\n    height: 2px;\n    bottom: 0;\n    left: 0;\n    background-color: ${baseTheme.colors.gray[700]};\n    transform-origin: bottom right;\n    transition: transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\n  }\n  &:hover::after {\n    transform: scaleX(1);\n    transform-origin: bottom le;\n  }\n  */\n  &:hover {\n    transform: scaleX(1);\n    transform-origin: bottom left;\n  }\n`\n\ninterface NavLinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  className?: string\n}\n\nconst NavLink: React.FC<React.PropsWithChildren<React.PropsWithChildren<NavLinkProps>>> = ({\n  children,\n  className,\n  ...rest\n}) => {\n  return (\n    <li className={cx(className)}>\n      <a className={cx(NavLinkStyles)} {...rest}>\n        {children}\n      </a>\n    </li>\n  )\n}\n\nexport default NavLink\n","import styled from \"@emotion/styled\"\n\nimport { baseTheme } from \"../styles\"\n\n// eslint-disable-next-line i18next/no-literal-string\nconst SkipLink = styled.a`\n  background: ${baseTheme.colors.green[600]};\n  color: ${baseTheme.colors.clear[100]};\n  font-weight: 700;\n  left: 50%;\n  padding: 6px;\n  position: absolute;\n  top: 3px;\n  transform: translateY(-150%);\n  text-decoration: none;\n  z-index: 100000;\n\n  &:focus {\n    transform: translateY(0%);\n  }\n`\n\nexport default SkipLink\n","import { css, cx } from \"@emotion/css\"\nimport { faFingerprint } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { baseTheme } from \"../../../styles\"\nimport { respondToOrLarger } from \"../../../styles/respond\"\nimport { MARGIN_BETWEEN_NAVBAR_AND_CONTENT } from \"../../../utils/constants\"\nimport SkipLink from \"../../SkipLink\"\n\nimport { NavigationProps } from \".\"\n\nconst StyledIcon = css`\n  font-size: 1.8rem;\n  color: ${baseTheme.colors.gray[700]};\n`\n// eslint-disable-next-line i18next/no-literal-string\nconst Navbar = css`\n  height: 90px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1rem;\n  padding: 0 1.4rem;\n  margin-bottom: ${MARGIN_BETWEEN_NAVBAR_AND_CONTENT};\n  border-bottom: 2px solid ${baseTheme.colors.gray[100]};\n\n  &:focus-visible {\n    outline: 2px solid ${baseTheme.colors.green[500]};\n    outline-offset: 2px;\n  }\n\n  ${respondToOrLarger.md} {\n    padding: 0 4rem;\n  }\n`\n// eslint-disable-next-line i18next/no-literal-string\nconst NavbarLogo = css`\n  color: ${baseTheme.colors.gray[700]};\n  cursor: pointer;\n\n  & > a:focus-visible {\n    outline: 2px solid ${baseTheme.colors.green[500]};\n    outline-offset: 2px;\n  }\n`\n\nconst Navigation: React.FC<React.PropsWithChildren<React.PropsWithChildren<NavigationProps>>> = ({\n  children,\n}) => {\n  const { t, i18n } = useTranslation()\n\n  const makeTopLeftButtonToTemporarilyGoToMoocfi = true\n\n  const moocfiUrl =\n    // eslint-disable-next-line i18next/no-literal-string\n    i18n?.language?.indexOf(\"fi\") !== -1 ? \"https://www.mooc.fi\" : \"https://www.mooc.fi/en\"\n\n  return (\n    <nav role=\"navigation\" className={cx(Navbar)} aria-label={t(\"navigation-menu\")}>\n      <SkipLink href=\"#maincontent\">{t(\"skip-to-content\")}</SkipLink>\n      <div className={cx(NavbarLogo)}>\n        <a\n          href={makeTopLeftButtonToTemporarilyGoToMoocfi ? moocfiUrl : \"/\"}\n          aria-label={t(\"home-page\")}\n          role=\"button\"\n        >\n          <FontAwesomeIcon\n            className={cx(StyledIcon)}\n            icon={faFingerprint}\n            aria-label={t(\"home-page\")}\n            aria-hidden=\"true\"\n          />\n        </a>\n      </div>\n      {children}\n    </nav>\n  )\n}\n\nexport default Navigation\n","import styled from \"@emotion/styled\"\nimport React, { forwardRef, Ref } from \"react\"\n\nimport { baseTheme, fontWeights, headingFont, theme } from \"../styles\"\nimport { defaultFontSizePx } from \"../styles/constants\"\nimport { respondToOrLarger } from \"../styles/respond\"\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant: \"primary\" | \"secondary\" | \"reject\" | \"tertiary\" | \"outlined\" | \"blue\" | \"white\" | \"icon\"\n  size: \"small\" | \"medium\" | \"large\"\n  transform?: \"capitalize\" | \"uppercase\" | \"none\" | \"lowercase\"\n  children?: React.ReactNode\n}\n\n// BaseButtonStyles is the primary button\nexport const BASE_BUTTON_STYLES = `\n  position: relative;\n  display: inline-block;\n  padding: ${theme.buttonSizes[\"large\"].padding};\n  font-family: ${headingFont};\n  font-weight: ${fontWeights.normal};\n  font-size: ${defaultFontSizePx}px;\n  line-height: normal;\n  vertical-align: baseline;\n  cursor: pointer;\n  user-select: none;\n  text-decoration: none;\n  text-align: center;\n  justify-content: center;\n  text-transform: uppercase;\n  letter-spacing: 0.02em;\n  transition: all 150ms linear;\n  border: 2.5px solid transparent;\n  z-index: 1;\n  white-space: nowrap;\n\n  color: ${theme.primary.text};\n  background-color: ${theme.primary.bg};\n  border-color: ${theme.primary.border};\n\n  &:hover {\n    color: ${theme.primary.hoverBorder};\n    background-color: ${theme.primary.hoverBg};\n    border-color: ${theme.primary.hoverBorder};\n    text-decoration: none;\n  }\n\n  &:active {\n    color: ${theme.primary.hoverText};\n    background-color: ${theme.primary.activeBg};\n    border-color: ${theme.primary.hoverBorder};\n  }\n\n  &:disabled {\n    color: ${theme.primary.disabledText};\n    background-color: ${theme.primary.disabledBg};\n    border-color: ${theme.primary.disabledBorder};\n    cursor: not-allowed;\n  }\n\n  &:focus {\n    text-decoration: none;\n  }\n\n\n  ${respondToOrLarger.sm} {\n    white-space: nowrap;\n  }\n`\n\nexport const PrimaryButtonStyles = (props: ButtonProps) => {\n  const PRIMARY_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n  `\n  return PRIMARY_BUTTON_STYLES\n}\n\nexport const WhiteButtonStyles = (props: ButtonProps) => {\n  const WHITE_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.white.text};\n    background: #FCFCFC;\n    border: 1.5px solid #DEDEDE;\n\n  `\n  return WHITE_BUTTON_STYLES\n}\n\nexport const IconButtonStyles = (props: ButtonProps) => {\n  const ICON_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n    color: black;\n    background: none;\n    border: 0px;\n\n    &:hover, &:active, &:disabled {\n      background: none;\n    }\n\n  `\n  return ICON_BUTTON_STYLES\n}\n\nexport const SecondaryButtonStyles = (props: ButtonProps) => {\n  const SECONDARY_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.secondary.text};\n    background: ${theme.secondary.bg};\n    border: 1.5px solid ${theme.secondary.border};\n\n    &:hover,\n    &:focus {\n      color: ${theme.secondary.hoverText};\n      box-shadow: 0 0 0 1px ${theme.secondary.text};\n      border: 1.5px solid ${theme.secondary.text};\n    }\n\n    &:active {\n      color: ${theme.secondary.hoverText};\n      background-color: ${theme.secondary.activeBg};\n    }\n\n    &:disabled {\n      color: ${theme.secondary.disabledText};\n      background-color: ${theme.secondary.disabledBg};\n      border-color: ${theme.secondary.disabledBorder};\n    }\n  `\n  return SECONDARY_BUTTON_STYLES\n}\n\nexport const RejectButtonStyles = (props: ButtonProps) => {\n  const REJECT_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.reject.text};\n    background: ${theme.reject.bg};\n    border: 1.5px solid ${theme.reject.border};\n\n    &:hover,\n    &:focus {\n      color: ${theme.reject.hoverText};\n      box-shadow: 0 0 0 1px ${theme.reject.text};\n      border: 1.5px solid ${theme.reject.text};\n    }\n\n    &:active {\n      color: ${theme.reject.hoverText};\n      background-color: ${theme.reject.activeBg};\n    }\n\n    &:disabled {\n      color: ${theme.reject.disabledText};\n      background-color: ${theme.reject.disabledBg};\n      border-color: ${theme.reject.disabledBorder};\n    }\n  `\n  return REJECT_BUTTON_STYLES\n}\n\nexport const TertiaryButtonStyles = (props: ButtonProps) => {\n  const TERTIARY_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.tertiary.text};\n    background-color: ${theme.tertiary.bg};\n    border: unset;\n\n    &:hover {\n      color: ${theme.tertiary.hoverText};\n      background-color: ${theme.tertiary.hoverBg};\n    }\n\n    &:active {\n      color: ${theme.tertiary.hoverText};\n      background-color: ${theme.tertiary.activeBg};\n    }\n\n    &:disabled {\n      color: ${theme.tertiary.disabledText};\n      background-color: ${theme.tertiary.disabledBg};\n      border-color: ${theme.tertiary.disabledBorder};\n    }\n  `\n  return TERTIARY_BUTTON_STYLES\n}\n\nexport const BlueButtonStyles = (props: ButtonProps) => {\n  const BLUE_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.tertiary.text};\n    background-color: ${baseTheme.colors.blue[500]};\n    border: unset;\n    border: 2px solid ${theme.secondary.border};\n\n    &:hover {\n      border: 2px solid ${baseTheme.colors.blue[600]};\n      color: ${baseTheme.colors.blue[700]};\n    }\n\n    &:active {\n      border: 2px solid ${baseTheme.colors.blue[400]};\n    }\n\n    &:disabled {\n      color: ${theme.secondary.disabledText};\n      background-color: ${theme.secondary.disabledBg};\n      border-color: ${theme.secondary.disabledBorder};\n    }\n  `\n  return BLUE_BUTTON_STYLES\n}\n\nconst PrimaryButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${PrimaryButtonStyles}\n`\n\nconst SecondaryButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${SecondaryButtonStyles}\n`\n\nconst RejectButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${RejectButtonStyles}\n`\n\nconst TertiaryButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${TertiaryButtonStyles}\n`\n\nconst BlueButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${BlueButtonStyles}\n`\n\nconst WhiteButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${WhiteButtonStyles}\n`\nconst IconButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${IconButtonStyles}\n`\n\nexport const LabelButton = styled.label`\n  ${BASE_BUTTON_STYLES}\n`\n\n/* BUTTON VARIANT\nPrimaryButton\nSecondaryButton\nGhostButton\nTertiaryButton\nIconButton\nLink */\n\nconst Button = forwardRef((props: ButtonProps, ref?: Ref<HTMLButtonElement>) => {\n  switch (props.variant) {\n    case \"primary\":\n      return <PrimaryButton ref={ref} {...props} />\n    case \"secondary\":\n      return <SecondaryButton ref={ref} {...props} />\n    case \"reject\":\n      return <RejectButton ref={ref} {...props} />\n    case \"tertiary\":\n      return <TertiaryButton ref={ref} {...props} />\n    case \"outlined\":\n      return <SecondaryButton ref={ref} {...props} />\n    case \"blue\":\n      return <BlueButton ref={ref} {...props} />\n    case \"white\":\n      return <WhiteButton ref={ref} {...props} />\n    case \"icon\":\n      return <IconButton ref={ref} {...props} />\n    default:\n      return <PrimaryButton ref={ref} {...props} />\n  }\n})\n\n// eslint-disable-next-line i18next/no-literal-string\nButton.displayName = \"Button\"\n\nexport default Button\n"],"names":[],"sourceRoot":""}