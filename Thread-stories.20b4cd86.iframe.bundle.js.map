{"version":3,"file":"Thread-stories.20b4cd86.iframe.bundle.js","mappings":";;;AAaA;;;;;;;;AASA;;AAGA;;;;;AAMA;;;;;AAMA;;;;;;;;;AAUA;;AAGA;;AAGA;;;;;;AAOA;;;;;;AAOA;;;;;;;;AASA;;AAGA;;AAGA;;;;;;;;AAsBA;;AAqEA;;AAMA;;;;;;;;;;;;;;;;;;;ACnHA","sources":["webpack://shared-module/./src/components/Forum/Thread.tsx","webpack://shared-module/./src/components/InputFields/TextAreaField.tsx"],"sourcesContent":["import { css } from \"@emotion/css\"\nimport styled from \"@emotion/styled\"\nimport React, { Fragment } from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport TextAreaField from \"../InputFields/TextAreaField\"\n\nimport { Item, Thread as StateProps } from \"./Forum\"\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: auto;\n`\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 2rem 2rem 1.6rem 2rem;\n\n  h2 {\n    align-self: end;\n  }\n`\nconst Content = styled.div`\n  padding: 0 2rem;\n`\nconst Text = styled.p`\n  font-size: 20px;\n  line-height: 140%;\n  font-weight: 500;\n  padding-bottom: 0rem;\n`\nconst Footer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 1.5rem 0 3rem 0;\n  align-items: center;\n`\nconst Author = styled.div`\n  display: flex;\n\n  span {\n    margin-right: 10px;\n    color: #535a66;\n    font-size: 20px;\n    align-self: center;\n  }\n`\nconst ActionTab = styled.div`\n  display: flex;\n`\nconst ChatIcon = styled.div`\n  display: flex;\n`\nconst PlaceholderAvatar = styled.div`\n  background: #f3f3f3;\n  border-radius: 100%;\n  height: 35px;\n  width: 35px;\n  margin-right: 10px;\n`\nconst PlaceholderIcon = styled.div`\n  background: #f3f3f3;\n  border-radius: 100%;\n  height: 30px;\n  width: 30px;\n  margin-right: 10px;\n`\nconst StyledReplyIcon = styled.div`\n  display: flex;\n  margin: 0 1.5rem;\n  cursor: pointer;\n\n  span {\n    color: #535a66;\n  }\n`\nconst StyledReportIcon = styled.span`\n  color: #b66757;\n`\nconst TimeLabel = styled.span`\n  color: #535a66;\n`\nconst StyledButton = styled.input`\n  display: flex;\n  border: none;\n  align-self: end;\n  padding: 0.5rem 2rem;\n  font-size: 18px;\n  color: #313947;\n  margin: 1rem 0;\n`\n\ninterface ThreadProps {\n  state: StateProps\n  author: string\n  handleReply?: (e: React.SyntheticEvent) => void\n  clicked?: boolean\n  selectedId?: string\n  handleClick?: (event: React.MouseEvent<HTMLInputElement>) => void\n}\n\nconst REPLY = \"reply\"\nconst SUBMIT = \"submit\"\n\nconst Thread: React.FC<React.PropsWithChildren<React.PropsWithChildren<ThreadProps>>> = (props) => {\n  const {\n    state: { items },\n  } = props\n\n  return (\n    <Fragment>\n      {GetThread(props)}\n      {items?.map((item) => GetNestedThread(item))}\n    </Fragment>\n  )\n}\n\nconst GetThread = (props: ThreadProps) => {\n  const { t } = useTranslation()\n  const { state, author, handleReply, handleClick, clicked, selectedId } = props\n\n  const { id, text, time } = state\n  return (\n    text && (\n      <Wrapper key={text}>\n        <Header>\n          <Author>\n            <PlaceholderAvatar></PlaceholderAvatar>\n            <span>{author}</span>\n          </Author>\n          <TimeLabel>{time}</TimeLabel>\n        </Header>\n        <Content>\n          <Text>{text}</Text>\n          <Footer>\n            <ActionTab>\n              <PlaceholderIcon></PlaceholderIcon>\n              <PlaceholderIcon></PlaceholderIcon>\n              <PlaceholderIcon></PlaceholderIcon>\n              <StyledReplyIcon onClick={handleClick}>\n                <PlaceholderIcon></PlaceholderIcon>\n                <span id={id}>{t(\"reply\")}</span>\n              </StyledReplyIcon>\n              <StyledReportIcon>{t(\"report\")}</StyledReportIcon>\n            </ActionTab>\n            <ChatIcon>\n              <PlaceholderIcon></PlaceholderIcon>\n            </ChatIcon>\n          </Footer>\n          {clicked && selectedId === id && (\n            <form onSubmit={handleReply}>\n              <TextAreaField\n                name={REPLY}\n                placeholder={t(\"leave-a-comment\")}\n                onChange={() => null}\n              />\n              <StyledButton type=\"submit\" name={SUBMIT} value={t(\"reply\")} />\n            </form>\n          )}\n        </Content>\n      </Wrapper>\n    )\n  )\n}\n\nconst GetNestedThread = (item: Item) => {\n  const { t } = useTranslation()\n  const { text, time, author } = item\n  return (\n    text && (\n      <Wrapper\n        className={css`\n          padding-left: 40px;\n        `}\n        key={text}\n      >\n        <Header\n          className={css`\n            padding-top: 0 !important;\n          `}\n        >\n          <Author>\n            <PlaceholderAvatar></PlaceholderAvatar>\n            <span>{author}</span>\n          </Author>\n          <TimeLabel>{time}</TimeLabel>\n        </Header>\n        <Content>\n          <Text>{text}</Text>\n          <Footer>\n            <ActionTab>\n              <PlaceholderIcon></PlaceholderIcon>\n              <PlaceholderIcon></PlaceholderIcon>\n              <PlaceholderIcon></PlaceholderIcon>\n              <StyledReportIcon>{t(\"report\")}</StyledReportIcon>\n            </ActionTab>\n            <ChatIcon>\n              <PlaceholderIcon></PlaceholderIcon>\n            </ChatIcon>\n          </Footer>\n        </Content>\n      </Wrapper>\n    )\n  )\n}\n\nexport default Thread\n","import { css, cx } from \"@emotion/css\"\nimport React, { useEffect, useRef } from \"react\"\nimport { UseFormRegisterReturn } from \"react-hook-form\"\n\ninterface TextAreaExtraProps {\n  label?: string\n  name?: string\n  errorMessage?: string\n  placeholder?: string\n  required?: boolean\n  value?: string\n  disabled?: boolean\n  maxlength?: string\n  onChange?: (value: string, name?: string) => void\n  className?: string\n  defaultValue?: string\n  autoResize?: boolean\n  register?: UseFormRegisterReturn\n}\n\ntype TextAreaProps = Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, \"onChange\"> &\n  TextAreaExtraProps\n\nfunction updateHeight(ref: React.RefObject<HTMLTextAreaElement>) {\n  if (ref.current) {\n    // eslint-disable-next-line i18next/no-literal-string\n    ref.current.style.height = \"auto\"\n    // eslint-disable-next-line i18next/no-literal-string\n    ref.current.style.height = `${ref.current.scrollHeight + 5}px`\n  }\n}\n\nconst TextAreaField = ({ onChange, className, autoResize, register, ...rest }: TextAreaProps) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n\n  useEffect(() => {\n    // This auto-resizes the textarea if the feature is enabled\n    if (!autoResize || !textareaRef.current) {\n      return\n    }\n    updateHeight(textareaRef)\n  }, [rest.value, autoResize])\n  return (\n    <div\n      className={cx(\n        css`\n          margin-bottom: 1rem;\n\n          label {\n            display: grid;\n\n            textarea {\n              background: #fcfcfc;\n              border: 1.6px solid #dedede;\n              padding: 10px 12px;\n            }\n\n            span {\n              color: #333;\n              font-size: 14px;\n              font-weight: 500;\n              margin-bottom: 0.2rem;\n            }\n          }\n        `,\n        className,\n      )}\n    >\n      <label>\n        <span>{rest.label}</span>\n        <textarea\n          ref={textareaRef}\n          onChange={({ target: { value, name } }) => {\n            if (onChange) {\n              onChange(value, name)\n            }\n\n            if (autoResize) {\n              updateHeight(textareaRef)\n            }\n          }}\n          {...register}\n          /* onKeyPress={(event) => onKeyPress(event)} */\n          defaultValue={rest.defaultValue}\n          {...rest}\n        />\n      </label>\n    </div>\n  )\n}\n\nexport default TextAreaField\n"],"names":[],"sourceRoot":""}