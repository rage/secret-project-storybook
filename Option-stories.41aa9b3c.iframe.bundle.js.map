{"version":3,"file":"Option-stories.41aa9b3c.iframe.bundle.js","mappings":";;;AAUA;;AAGA;;;;;;;AAQA;;;;;;;;AASA;;;;;;;AA0BA;ACwJA;AACA;AAGA;AACA;AA1HA;AA8HA;AACA;AAjGA;AAqGA;AACA;AAxEA;AA4EA;AACA;AAjDA;AAqDA;AACA;AA3JA;AA2KA;AAXA;AAWA","sources":["webpack://shared-module/./src/components/PeerReview/Option.tsx","webpack://shared-module/./src/components/Button.tsx"],"sourcesContent":["import styled from \"@emotion/styled\"\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport Button from \"../Button\"\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n  max-width: 1000px;\n`\nconst Header = styled.div`\n  border-bottom: 4px solid #fff;\n`\nconst Body = styled.div`\n  background: #f9f9f9;\n\n  h3 {\n    padding: 20px 40px;\n    text-transform: uppercase;\n  }\n`\nconst Text = styled.div`\n  padding: 20px 40px 40px 40px;\n\n  p {\n    font-size: 20px;\n    line-height: 30px;\n    color: #313947;\n  }\n`\nconst Footer = styled.div`\n  margin-top: 15px;\n  background: #f9f9f9;\n  height: auto;\n  display: flex;\n  justify-content: space-between;\n  padding: 20px 40px;\n`\n\nconst TITLE = \"Option 1\"\nconst CONTENT = `Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum\nhas been the industrys standard dummy text ever since the 1500s, when an unknown printer\ntook a galley of type and scrambled it to make a type specimen book. It has survived not\nonly five centuries, but also the leap into electronic typesetting, remaining\nessentially unchanged. It was popularised in the 1960s with the release of Letraset\nsheets containing Lorem Ipsum passages, and more recently with desktop publishing\nsoftware like Aldus PageMaker including versions of Lorem Ipsum. Lorem Ipsum is simply\ndummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys\nstandard dummy text ever since the 1500s, when an unknown printer took a galley of type\nand scrambled it to make a type specimen book. It has survived not only five centuries,\nbut also the leap into electronic typesetting, remaining essentially unchanged. Lorem\nIpsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has\nbeen the industrys standard dummy text ever since the 1500s.`\n\nexport type OptionComponentProps = React.HTMLAttributes<HTMLDivElement>\n\nconst Option: React.FC<\n  React.PropsWithChildren<React.PropsWithChildren<OptionComponentProps>>\n> = () => {\n  const { t } = useTranslation()\n  return (\n    <Wrapper>\n      <Body>\n        <Header>\n          <h3>{TITLE}:</h3>\n        </Header>\n        <Text>\n          <p>{CONTENT}</p>\n        </Text>\n      </Body>\n      <Footer>\n        <Button transform=\"capitalize\" variant=\"primary\" size=\"large\">\n          {t(\"shuffle\")}\n        </Button>\n        <Button transform=\"capitalize\" variant=\"primary\" size=\"large\">\n          {t(\"report-as-spam\")}\n        </Button>\n      </Footer>\n    </Wrapper>\n  )\n}\n\nexport default Option\n","import styled from \"@emotion/styled\"\nimport React, { forwardRef, Ref } from \"react\"\n\nimport { baseTheme, fontWeights, headingFont, theme } from \"../styles\"\nimport { defaultFontSizePx } from \"../styles/constants\"\nimport { respondToOrLarger } from \"../styles/respond\"\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant: \"primary\" | \"secondary\" | \"reject\" | \"tertiary\" | \"outlined\" | \"blue\" | \"white\"\n  size: \"small\" | \"medium\" | \"large\"\n  transform?: \"capitalize\" | \"uppercase\" | \"none\" | \"lowercase\"\n  children?: React.ReactNode\n}\n\n// BaseButtonStyles is the primary button\nexport const BASE_BUTTON_STYLES = `\n  position: relative;\n  display: inline-block;\n  padding: ${theme.buttonSizes[\"large\"].padding};\n  font-family: ${headingFont};\n  font-weight: ${fontWeights.normal};\n  font-size: ${defaultFontSizePx}px;\n  line-height: normal;\n  vertical-align: baseline;\n  cursor: pointer;\n  user-select: none;\n  text-decoration: none;\n  text-align: center;\n  justify-content: center;\n  text-transform: uppercase;\n  letter-spacing: 0.02em;\n  transition: all 150ms linear;\n  border: 2.5px solid transparent;\n  z-index: 1;\n  white-space: nowrap;\n\n  color: ${theme.primary.text};\n  background-color: ${theme.primary.bg};\n  border-color: ${theme.primary.border};\n\n  &:hover {\n    color: ${theme.primary.hoverBorder};\n    background-color: ${theme.primary.hoverBg};\n    border-color: ${theme.primary.hoverBorder};\n    text-decoration: none;\n  }\n\n  &:active {\n    color: ${theme.primary.hoverText};\n    background-color: ${theme.primary.activeBg};\n    border-color: ${theme.primary.hoverBorder};\n  }\n\n  &:disabled {\n    color: ${theme.primary.disabledText};\n    background-color: ${theme.primary.disabledBg};\n    border-color: ${theme.primary.disabledBorder};\n    cursor: not-allowed;\n  }\n\n  &:focus {\n    text-decoration: none;\n  }\n\n\n  ${respondToOrLarger.sm} {\n    white-space: nowrap;\n  }\n`\n\nexport const PrimaryButtonStyles = (props: ButtonProps) => {\n  const PRIMARY_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n  `\n  return PRIMARY_BUTTON_STYLES\n}\n\nexport const WhiteButtonStyles = (props: ButtonProps) => {\n  const WHITE_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.white.text};\n    background: #FCFCFC;\n    border: 1.5px solid #DEDEDE;\n\n  `\n  return WHITE_BUTTON_STYLES\n}\n\nexport const SecondaryButtonStyles = (props: ButtonProps) => {\n  const SECONDARY_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.secondary.text};\n    background: ${theme.secondary.bg};\n    border: 1.5px solid ${theme.secondary.border};\n\n    &:hover,\n    &:focus {\n      color: ${theme.secondary.hoverText};\n      box-shadow: 0 0 0 1px ${theme.secondary.text};\n      border: 1.5px solid ${theme.secondary.text};\n    }\n\n    &:active {\n      color: ${theme.secondary.hoverText};\n      background-color: ${theme.secondary.activeBg};\n    }\n\n    &:disabled {\n      color: ${theme.secondary.disabledText};\n      background-color: ${theme.secondary.disabledBg};\n      border-color: ${theme.secondary.disabledBorder};\n    }\n  `\n  return SECONDARY_BUTTON_STYLES\n}\n\nexport const RejectButtonStyles = (props: ButtonProps) => {\n  const REJECT_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.reject.text};\n    background: ${theme.reject.bg};\n    border: 1.5px solid ${theme.reject.border};\n\n    &:hover,\n    &:focus {\n      color: ${theme.reject.hoverText};\n      box-shadow: 0 0 0 1px ${theme.reject.text};\n      border: 1.5px solid ${theme.reject.text};\n    }\n\n    &:active {\n      color: ${theme.reject.hoverText};\n      background-color: ${theme.reject.activeBg};\n    }\n\n    &:disabled {\n      color: ${theme.reject.disabledText};\n      background-color: ${theme.reject.disabledBg};\n      border-color: ${theme.reject.disabledBorder};\n    }\n  `\n  return REJECT_BUTTON_STYLES\n}\n\nexport const TertiaryButtonStyles = (props: ButtonProps) => {\n  const TERTIARY_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.tertiary.text};\n    background-color: ${theme.tertiary.bg};\n    border: unset;\n\n    &:hover {\n      color: ${theme.tertiary.hoverText};\n      background-color: ${theme.tertiary.hoverBg};\n    }\n\n    &:active {\n      color: ${theme.tertiary.hoverText};\n      background-color: ${theme.tertiary.activeBg};\n    }\n\n    &:disabled {\n      color: ${theme.tertiary.disabledText};\n      background-color: ${theme.tertiary.disabledBg};\n      border-color: ${theme.tertiary.disabledBorder};\n    }\n  `\n  return TERTIARY_BUTTON_STYLES\n}\n\nexport const BlueButtonStyles = (props: ButtonProps) => {\n  const BLUE_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.tertiary.text};\n    background-color: ${baseTheme.colors.blue[500]};\n    border: unset;\n    border: 2px solid ${theme.secondary.border};\n\n    &:hover {\n      border: 2px solid ${baseTheme.colors.blue[600]};\n      color: ${baseTheme.colors.blue[700]};\n    }\n\n    &:active {\n      border: 2px solid ${baseTheme.colors.blue[400]};\n    }\n\n    &:disabled {\n      color: ${theme.secondary.disabledText};\n      background-color: ${theme.secondary.disabledBg};\n      border-color: ${theme.secondary.disabledBorder};\n    }\n  `\n  return BLUE_BUTTON_STYLES\n}\n\nconst PrimaryButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${PrimaryButtonStyles}\n`\n\nconst SecondaryButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${SecondaryButtonStyles}\n`\n\nconst RejectButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${RejectButtonStyles}\n`\n\nconst TertiaryButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${TertiaryButtonStyles}\n`\n\nconst BlueButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${BlueButtonStyles}\n`\n\nconst WhiteButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${WhiteButtonStyles}\n`\n\nexport const LabelButton = styled.label`\n  ${BASE_BUTTON_STYLES}\n`\n\n/* BUTTON VARIANT\nPrimaryButton\nSecondaryButton\nGhostButton\nTertiaryButton\nIconButton\nLink */\n\nconst Button = forwardRef((props: ButtonProps, ref?: Ref<HTMLButtonElement>) => {\n  switch (props.variant) {\n    case \"primary\":\n      return <PrimaryButton ref={ref} {...props} />\n    case \"secondary\":\n      return <SecondaryButton ref={ref} {...props} />\n    case \"reject\":\n      return <RejectButton ref={ref} {...props} />\n    case \"tertiary\":\n      return <TertiaryButton ref={ref} {...props} />\n    case \"outlined\":\n      return <SecondaryButton ref={ref} {...props} />\n    case \"blue\":\n      return <BlueButton ref={ref} {...props} />\n    case \"white\":\n      return <WhiteButton ref={ref} {...props} />\n    default:\n      return <PrimaryButton ref={ref} {...props} />\n  }\n})\n\n// eslint-disable-next-line i18next/no-literal-string\nButton.displayName = \"Button\"\n\nexport default Button\n"],"names":[],"sourceRoot":""}