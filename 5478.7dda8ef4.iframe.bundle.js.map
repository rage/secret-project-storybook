{"version":3,"file":"5478.7dda8ef4.iframe.bundle.js","mappings":";;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;AAGA;;;;;;;AAOA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;ACxGA;;;;;;;AASA;AAgBA;AACA;AACA;;AAEA;;;;;AAKA;;;;;;AAQA","sources":["webpack://shared-module/./src/components/ErrorBanner.tsx","webpack://shared-module/./src/components/Spinner.tsx"],"sourcesContent":["import styled from \"@emotion/styled\"\nimport { AxiosError } from \"axios\"\nimport React, { useEffect, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { ErrorResponse } from \"../bindings\"\nimport { isErrorData, isErrorResponse } from \"../bindings.guard\"\nimport { baseTheme } from \"../styles\"\n\nimport Spinner from \"./Spinner\"\n\nconst BannerWrapper = styled.div`\n  background: #f1f1f1;\n  width: 100%;\n  position: relative;\n  margin: 0 auto;\n  display: block;\n  border-left: 4px solid #da4453;\n`\n\nconst Content = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  max-width: 100%;\n  font-weight: 500;\n  font-size: 1rem;\n  line-height: 1.4;\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 0.5rem;\n\n  a {\n    text-decoration: none;\n    max-width: 100%;\n    cursor: pointer;\n    display: flex;\n    height: 1rem;\n    line-height: 1rem;\n    margin-top: 1rem;\n\n    span {\n      display: flex;\n      align-items: center;\n      margin-left: 0.5rem;\n    }\n  }\n`\nconst Text = styled.div`\n  padding: 0 2rem;\n`\nconst DetailTag = styled.div`\n  background: #e1e1e1;\n  details {\n    padding: 0 2rem;\n  }\n\n  details[open] summary ~ * {\n    color: ${baseTheme.colors.gray[700]};\n  }\n\n  details[open] > div {\n    animation-duration: 0.3s;\n    animation-fill-mode: forwards;\n  }\n\n  details summary {\n    padding: 1rem 0;\n    position: relative;\n    cursor: pointer;\n    font-size: 1.1rem;\n    font-weight: medium;\n    list-style: none;\n    color: ${baseTheme.colors.gray[700]};\n    outline: 0;\n    ::-webkit-details-marker {\n      display: none;\n    }\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  details[open] > summary {\n    color: #1c1c1c;\n  }\n\n  details[open] summary {\n    opacity: 0.9;\n  }\n\n  ul {\n    padding: 0;\n    margin: 0;\n    padding-bottom: 2rem;\n  }\n\n  ul li {\n    font-size: 1.1rem;\n    margin: 0 0 0.2rem;\n    padding: 15px 30px;\n    line-height: 1.7;\n    list-style: none;\n    background: #e3e3e3;\n    border: 2px solid #c1c1c1;\n    border-radius: 10px;\n  }\n\n  ul li pre {\n    white-space: pre-line;\n  }\n`\n\nexport interface BannerExtraProps {\n  variant: \"text\" | \"link\" | \"readOnly\"\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error: unknown | string\n}\n\nexport type BannerProps = React.HTMLAttributes<HTMLDivElement> & BannerExtraProps\n\nconst ErrorBanner: React.FC<React.PropsWithChildren<React.PropsWithChildren<BannerProps>>> = (\n  props,\n) => {\n  const { t } = useTranslation()\n\n  const { error: unknownError } = props\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const anyError = unknownError as any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const [error, setError] = useState<any>(undefined)\n  useEffect(() => {\n    if (typeof anyError === \"object\" && anyError !== null && anyError.data instanceof Blob) {\n      const blob: Blob = anyError.data\n      blob.text().then((text) => {\n        try {\n          const parsed = JSON.parse(text)\n          setError({ ...anyError, data: parsed })\n        } catch {\n          setError({ ...anyError, data: text })\n        }\n      })\n    } else if (anyError === undefined) {\n      throw new Error(\"Invalid input\")\n    } else {\n      setError(anyError)\n    }\n  }, [anyError])\n\n  if (error === undefined) {\n    // error data is blob and haven't read it yet, this should practically never be shown\n    return <Spinner variant=\"medium\" />\n  }\n\n  if (typeof error === \"string\") {\n    return (\n      <BannerWrapper>\n        <Content>\n          <Text>\n            <h2>{t(\"error-title\")}</h2>\n            <p>{error}</p>\n          </Text>\n        </Content>\n      </BannerWrapper>\n    )\n  } else if (typeof error === \"object\" && error !== null) {\n    if (isErrorResponse(error.data)) {\n      // response data contains an error response\n      const data: ErrorResponse = error.data\n      const errorData = data.data\n      let linkComponent = <></>\n      if (isErrorData(errorData)) {\n        const url = window.location.href.replace(location.hash, \"\")\n        // eslint-disable-next-line i18next/no-literal-string\n        linkComponent = <a href={`${url}#${errorData.block_id}`}>Go to error</a>\n      }\n\n      return (\n        <BannerWrapper>\n          <Content>\n            <Text>\n              <h2>\n                {t(\"error-title\")} {error.status}: {data.title}\n              </h2>\n              <p>{data.message}</p>\n            </Text>\n            <DetailTag>\n              {data.source && (\n                <details>\n                  <summary>{t(\"show-error-source\")}</summary>\n                  <ul>\n                    <li>\n                      <pre>{data.source}</pre>\n                    </li>\n                  </ul>\n                </details>\n              )}\n            </DetailTag>\n            {data.data && <Text>{linkComponent}</Text>}\n          </Content>\n        </BannerWrapper>\n      )\n    } else if (error.isAxiosError) {\n      const axiosError = error as AxiosError\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const responseMessage = (axiosError.response?.data as any)?.message\n      return (\n        <BannerWrapper>\n          <Content>\n            <Text>\n              <h2>\n                {t(\"error-title\")}: {axiosError.message}\n              </h2>\n              {responseMessage && <p>{responseMessage}</p>}\n            </Text>\n            <DetailTag>\n              {Boolean(axiosError.response?.data) && (\n                <details>\n                  <summary>{t(\"show-error-source\")}</summary>\n                  <ul>\n                    <li>\n                      <pre>{JSON.stringify(axiosError.response?.data, undefined, 2)}</pre>\n                    </li>\n                  </ul>\n                </details>\n              )}\n            </DetailTag>\n          </Content>\n        </BannerWrapper>\n      )\n    } else if (\n      error.status !== undefined &&\n      error.statusText !== undefined &&\n      typeof error.request === \"object\" &&\n      error.request.responseURL !== undefined\n    ) {\n      // error contains a response but no ErrorResponse\n      return (\n        <BannerWrapper>\n          <Content>\n            <Text>\n              <h2>\n                {t(\"error-title\")} {error.status}: {error.statusText}\n              </h2>\n              <p>{error.request.responseURL}</p>\n            </Text>\n            <DetailTag>\n              {error.data && (\n                <details>\n                  <summary>{t(\"show-error-source\")}</summary>\n                  <ul>\n                    <li>\n                      <pre>{JSON.stringify(error.data, undefined, 2)}</pre>\n                    </li>\n                  </ul>\n                </details>\n              )}\n            </DetailTag>\n          </Content>\n        </BannerWrapper>\n      )\n    } else if (error instanceof Error) {\n      // caught error from somewhere (JSON.stringifying an error returns {})\n      return (\n        <BannerWrapper>\n          <Content>\n            <Text>\n              <h2>{t(\"error-title\")}</h2>\n            </Text>\n            <DetailTag>\n              <details>\n                <summary>{t(\"show-error-source\")}</summary>\n                <ul>\n                  <li>\n                    <pre>\n                      {error.toString()}\n                      <br />\n                      {error.stack}\n                    </pre>\n                  </li>\n                </ul>\n              </details>\n            </DetailTag>\n          </Content>\n        </BannerWrapper>\n      )\n    }\n  }\n\n  // Error very much unknown\n  return (\n    <BannerWrapper>\n      <Content>\n        <Text>\n          <h2>{t(\"error-title\")}</h2>\n        </Text>\n        <DetailTag>\n          <details>\n            <summary>{t(\"show-error-source\")}</summary>\n            <ul>\n              <li>\n                <pre>{JSON.stringify(error, undefined, 2)}</pre>\n              </li>\n            </ul>\n          </details>\n        </DetailTag>\n      </Content>\n    </BannerWrapper>\n  )\n}\n\nexport default ErrorBanner\n","/* eslint-disable i18next/no-literal-string */\nimport { keyframes } from \"@emotion/react\"\nimport styled from \"@emotion/styled\"\n\nimport { baseTheme } from \"../styles\"\nimport { SPINNER_CLASS } from \"../utils/constants\"\n\nexport interface SpinnerProps {\n  variant: \"large\" | \"medium\" | \"small\"\n  disableMargin?: boolean\n}\nconst rotation = keyframes`\n  0% { transform: rotate(0deg) }\n  100% { transform: rotate(360deg) }\n`\n\nconst fadeIn = keyframes`\n0% {\n  opacity: 0;\n}\n100% {\n  opacity: 1;\n}\n`\n\nconst variantSizes = {\n  small: {\n    width: \"16px\",\n    height: \"16px\",\n  },\n  medium: {\n    width: \"30px\",\n    height: \"30px\",\n  },\n  large: {\n    width: \"42px\",\n    height: \"42px\",\n  },\n}\n\nconst StyledSpinner = styled.div<SpinnerProps>`\n  margin: ${(props) => (props.disableMargin ? \"0\" : \"1rem\")};\n  width: ${(props) => variantSizes[props.variant].width};\n  height: ${(props) => variantSizes[props.variant].height};\n  border: 5px solid #f1f1f1;\n  border-bottom-color: ${baseTheme.colors.green[500]};\n  border-radius: 50%;\n  display: inline-block;\n  /** Showing the spinner is delayed because showing a spinner for a moment on fast transitions makes the application to feel like more slow than it is **/\n  opacity: 0;\n  animation-name: ${rotation}, ${fadeIn};\n  animation-duration: 1s, 600ms;\n  animation-timing-function: linear, ease;\n  animation-iteration-count: infinite, 1;\n  animation-delay: 400ms;\n  animation-fill-mode: forwards;\n`\n\nconst Spinner = (props: SpinnerProps) => {\n  return <StyledSpinner className={SPINNER_CLASS} {...props}></StyledSpinner>\n}\n\nexport default Spinner\n"],"names":[],"sourceRoot":""}