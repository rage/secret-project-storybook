{"version":3,"file":"TextArea-stories.1802a1c2.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAgEA","sources":["webpack://shared-module/./src/components/InputFields/TextAreaField.tsx"],"sourcesContent":["import { css, cx } from \"@emotion/css\"\nimport React, { useEffect, useRef } from \"react\"\nimport { UseFormRegisterReturn } from \"react-hook-form\"\n\ninterface TextAreaExtraProps {\n  label?: string\n  name?: string\n  errorMessage?: string\n  placeholder?: string\n  required?: boolean\n  value?: string\n  disabled?: boolean\n  maxlength?: string\n  onChange?: (value: string, name?: string) => void\n  className?: string\n  defaultValue?: string\n  autoResize?: boolean\n  register?: UseFormRegisterReturn\n}\n\ntype TextAreaProps = Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, \"onChange\"> &\n  TextAreaExtraProps\n\nfunction updateHeight(ref: React.RefObject<HTMLTextAreaElement>) {\n  if (ref.current) {\n    // eslint-disable-next-line i18next/no-literal-string\n    ref.current.style.height = \"auto\"\n    // eslint-disable-next-line i18next/no-literal-string\n    ref.current.style.height = `${ref.current.scrollHeight + 5}px`\n  }\n}\n\nconst TextAreaField = ({ onChange, className, autoResize, register, ...rest }: TextAreaProps) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n\n  useEffect(() => {\n    // This auto-resizes the textarea if the feature is enabled\n    if (!autoResize || !textareaRef.current) {\n      return\n    }\n    updateHeight(textareaRef)\n  }, [rest.value, autoResize])\n  return (\n    <div\n      className={cx(\n        css`\n          margin-bottom: 1rem;\n\n          label {\n            display: grid;\n\n            textarea {\n              background: #fcfcfc;\n              border: 1.6px solid #dedede;\n              padding: 10px 12px;\n            }\n\n            span {\n              color: #333;\n              font-size: 14px;\n              font-weight: 500;\n              margin-bottom: 0.2rem;\n            }\n          }\n        `,\n        className,\n      )}\n    >\n      <label>\n        <span>{rest.label}</span>\n        <textarea\n          ref={textareaRef}\n          onChange={({ target: { value, name } }) => {\n            if (onChange) {\n              onChange(value, name)\n            }\n\n            if (autoResize) {\n              updateHeight(textareaRef)\n            }\n          }}\n          {...register}\n          /* onKeyPress={(event) => onKeyPress(event)} */\n          defaultValue={rest.defaultValue}\n          {...rest}\n        />\n      </label>\n    </div>\n  )\n}\n\nexport default TextAreaField\n"],"names":[],"sourceRoot":""}