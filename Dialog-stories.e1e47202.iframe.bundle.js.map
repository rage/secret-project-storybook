{"version":3,"file":"Dialog-stories.e1e47202.iframe.bundle.js","mappings":";;;;;AA8EA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;;;;AAMA;AAcA;AACA","sources":["webpack://shared-module/./src/components/Dialog.tsx"],"sourcesContent":["import { css } from \"@emotion/css\"\nimport ClickAwayListener from \"@mui/base/ClickAwayListener\"\nimport { useEffect, useRef } from \"react\"\n\nimport { typography } from \"../styles\"\n\ninterface DialogExtraProps {\n  open: boolean\n  onClose?: () => void\n  closeable?: boolean\n  noPadding?: boolean\n  width?: \"normal\" | \"wide\"\n}\n\nconst Dialog: React.FC<React.HTMLAttributes<HTMLDialogElement> & DialogExtraProps> = ({\n  children,\n  open,\n  onClose,\n  closeable = true,\n  noPadding = false,\n  width = \"normal\",\n  ...rest\n}) => {\n  const ref = useRef<HTMLDialogElement>(null)\n\n  useEffect(() => {\n    const current = ref.current\n    const closeCallback = () => {\n      if (onClose) {\n        onClose()\n      }\n    }\n    current?.addEventListener(\"close\", closeCallback)\n    return () => {\n      current?.removeEventListener(\"close\", closeCallback)\n    }\n  }, [onClose])\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    if (open && !ref.current.open) {\n      ref.current.showModal()\n    } else if (ref.current.open) {\n      ref.current.close()\n    }\n  }, [open])\n\n  // Make non-closable dialogs not closable\n  useEffect(() => {\n    if (!ref.current || closeable) {\n      return\n    }\n    const eventHandler = (event: Event) => {\n      if (!event.cancelable) {\n        ref.current?.showModal()\n      }\n      event.preventDefault()\n    }\n    const element = ref.current\n    element.addEventListener(\"close\", eventHandler)\n    element.addEventListener(\"cancel\", eventHandler)\n    return () => {\n      element?.removeEventListener(\"close\", eventHandler)\n      element?.removeEventListener(\"cancel\", eventHandler)\n    }\n  }, [closeable])\n\n  return (\n    <dialog\n      ref={ref}\n      {...rest}\n      className={css`\n        border: 0;\n        border-radius: 5px;\n        padding: 0;\n        width: 95%;\n        max-width: ${width === \"normal\" ? \"700px\" : \"1200px\"};\n\n        h1 {\n          font-size: ${typography.h5};\n        }\n        h2 {\n          font-size: ${typography.h6};\n        }\n        h3 {\n          font-size: ${typography.h6};\n        }\n        h4 {\n          font-size: ${typography.h6};\n        }\n        h5 {\n          font-size: ${typography.h6};\n        }\n        h6 {\n          font-size: ${typography.h6};\n        }\n\n        &::backdrop {\n          background: rgba(0, 0, 0, 0.4);\n        }\n      `}\n    >\n      {open && (\n        <ClickAwayListener\n          onClickAway={() => {\n            if (closeable) {\n              ref.current?.close()\n            }\n          }}\n        >\n          {/* For accessibility, so that screen readers don't interpret the whole dialog as clickable. */}\n          <div\n            role=\"presentation\"\n            className={css`\n              ${!noPadding && `padding: 2rem 3rem;`}\n            `}\n          >\n            {children}\n          </div>\n        </ClickAwayListener>\n      )}\n    </dialog>\n  )\n}\n\nexport default Dialog\n"],"names":[],"sourceRoot":""}