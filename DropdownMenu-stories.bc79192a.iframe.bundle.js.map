{"version":3,"file":"DropdownMenu-stories.bc79192a.iframe.bundle.js","mappings":";;;;;;AA+BA;;;;;;;;;;;AAaA;;;;ACnBA;;;AAUA;;;;;AAKA;;;AAIA;;;;;;;;;;;;;;;AAqBA;;;;;;AAMA","sources":["webpack://shared-module/./src/components/DropdownMenu/DropdownMenuItem.tsx","webpack://shared-module/./src/components/DropdownMenu/index.tsx"],"sourcesContent":["import { css } from \"@emotion/css\"\nimport Link from \"next/link\"\nimport React from \"react\"\n\nimport { baseTheme } from \"../../styles\"\n\ninterface DropdownMenuItemWithOnClick {\n  label: string\n  href?: undefined\n  onClick: () => void\n}\n\ninterface DropdownMenuItemWithHref {\n  label: string\n  href: string\n  onClick?: undefined\n}\n\nexport type DropdownMenuItemType = DropdownMenuItemWithOnClick | DropdownMenuItemWithHref\n\ninterface DropdownMenuProps {\n  item: DropdownMenuItemType\n  closeMenu: () => void\n}\n\nconst itemInnerStyles = css`\n  border: none;\n  padding: 0.5rem 1.5rem;\n  background-color: white;\n  cursor: pointer;\n  display: block;\n  color: ${baseTheme.colors.gray[500]};\n  font-weight: 600;\n  text-decoration: none;\n  width: 100%;\n  white-space: nowrap;\n  text-align: left;\n  &:focus {\n    filter: brightness(92%) contrast(110%);\n    border: 2px solid black;\n    outline: none;\n  }\n`\n\nconst DropdownMenuItem: React.FC<\n  React.PropsWithChildren<React.PropsWithChildren<DropdownMenuProps>>\n> = ({ item, closeMenu }) => {\n  if (item.href) {\n    return (\n      <li>\n        <Link href={item.href} className={itemInnerStyles}>\n          {item.label}\n        </Link>\n      </li>\n    )\n  }\n  return (\n    <li>\n      <button\n        onClick={() => {\n          try {\n            if (item.onClick) {\n              item.onClick()\n            }\n          } finally {\n            closeMenu()\n          }\n        }}\n        className={itemInnerStyles}\n      >\n        {item.label}\n      </button>\n    </li>\n  )\n}\n\nexport default DropdownMenuItem\n","import { css } from \"@emotion/css\"\nimport { faEllipsisV } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport React, { useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { baseTheme } from \"../../styles\"\n\nimport DropdownMenuItem, { DropdownMenuItemType } from \"./DropdownMenuItem\"\n\nexport interface DropdownMenuProps {\n  items: (DropdownMenuItemType | null)[]\n}\n\nconst DropdownMenu: React.FC<\n  React.PropsWithChildren<React.PropsWithChildren<DropdownMenuProps>>\n> = ({ items }) => {\n  const { t } = useTranslation()\n  const [expanded, setExpanded] = useState(false)\n  return (\n    <div\n      className={css`\n        position: relative;\n        display: flex;\n        align-items: center;\n      `}\n    >\n      <button\n        aria-expanded={expanded}\n        onClick={() => {\n          setExpanded(!expanded)\n        }}\n        className={css`\n          background-color: transparent;\n          border: none;\n          color: ${baseTheme.colors.gray[400]};\n          cursor: pointer;\n          padding: 0 0.66em;\n          margin: 0 0.66em;\n          &:hover {\n            background-color: ${baseTheme.colors.clear[200]};\n            border-radius: 50px;\n          }\n        `}\n        aria-label={expanded ? t(\"close\") : t(\"dropdown-menu\")}\n      >\n        <FontAwesomeIcon icon={faEllipsisV} />\n      </button>\n      {expanded && (\n        <ul\n          className={css`\n            z-index: 200;\n            box-shadow: 0px 8px 40px rgba(0, 0, 0, 0.1);\n            width: fit-content;\n            list-style: none;\n            padding: 0;\n            border-radius: 4px;\n            overflow: hidden;\n            margin: 0;\n            font-size: 17px;\n            position: absolute;\n            top: 33px;\n            left: 0;\n\n            li + li {\n              border-top: 2px solid ${baseTheme.colors.clear[200]};\n            }\n\n            li:hover {\n              filter: brightness(92%) contrast(110%);\n            }\n          `}\n        >\n          {items\n            .filter((item) => item !== null)\n            .map((item) => {\n              if (item === null) {\n                return null\n              }\n              return (\n                <DropdownMenuItem\n                  key={item.label}\n                  item={item}\n                  closeMenu={() => {\n                    setExpanded(false)\n                  }}\n                />\n              )\n            })}\n        </ul>\n      )}\n    </div>\n  )\n}\n\nexport default DropdownMenu\n"],"names":[],"sourceRoot":""}