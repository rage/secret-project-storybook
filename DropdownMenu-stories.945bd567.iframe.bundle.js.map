{"version":3,"file":"DropdownMenu-stories.945bd567.iframe.bundle.js","mappings":";;;;;;AA+BA;;;;;;;;;;;AAaA;;;ACiCA;;;AAWA;;;;;AAKA;;;AAIA;;AAYA;;;;;;;;;;AAaA;;;;;;AAMA","sources":["webpack://shared-module/./src/components/DropdownMenu/DropdownMenuItem.tsx","webpack://shared-module/./src/components/DropdownMenu/index.tsx"],"sourcesContent":["import { css } from \"@emotion/css\"\nimport Link from \"next/link\"\nimport React from \"react\"\n\nimport { baseTheme } from \"../../styles\"\n\ninterface DropdownMenuItemWithOnClick {\n  label: string\n  href?: undefined\n  onClick: () => void\n}\n\ninterface DropdownMenuItemWithHref {\n  label: string\n  href: string\n  onClick?: undefined\n}\n\nexport type DropdownMenuItemType = DropdownMenuItemWithOnClick | DropdownMenuItemWithHref\n\ninterface DropdownMenuProps {\n  item: DropdownMenuItemType\n  closeMenu: () => void\n}\n\nconst itemInnerStyles = css`\n  border: none;\n  padding: 0.5rem 1.5rem;\n  background-color: white;\n  cursor: pointer;\n  display: block;\n  color: ${baseTheme.colors.gray[500]};\n  font-weight: 600;\n  text-decoration: none;\n  width: 100%;\n  white-space: nowrap;\n  text-align: left;\n  &:focus {\n    filter: brightness(92%) contrast(110%);\n    border: 2px solid black;\n    outline: none;\n  }\n`\n\nconst DropdownMenuItem: React.FC<\n  React.PropsWithChildren<React.PropsWithChildren<DropdownMenuProps>>\n> = ({ item, closeMenu }) => {\n  if (item.href) {\n    return (\n      <li>\n        <Link href={item.href} className={itemInnerStyles}>\n          {item.label}\n        </Link>\n      </li>\n    )\n  }\n  return (\n    <li>\n      <button\n        onClick={() => {\n          try {\n            if (item.onClick) {\n              item.onClick()\n            }\n          } finally {\n            closeMenu()\n          }\n        }}\n        className={itemInnerStyles}\n      >\n        {item.label}\n      </button>\n    </li>\n  )\n}\n\nexport default DropdownMenuItem\n","import { css } from \"@emotion/css\"\nimport { DotsVertical } from \"@vectopus/atlas-icons-react\"\nimport React, { useCallback, useEffect, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { usePopper } from \"react-popper\"\n\nimport { baseTheme } from \"../../styles\"\n\nimport DropdownMenuItem, { DropdownMenuItemType } from \"./DropdownMenuItem\"\n\nexport interface DropdownMenuProps {\n  items: (DropdownMenuItemType | null)[]\n}\n\nconst DropdownMenu: React.FC<\n  React.PropsWithChildren<React.PropsWithChildren<DropdownMenuProps>>\n> = ({ items }) => {\n  const { t } = useTranslation()\n  const [expanded, setExpanded] = useState(false)\n\n  // This is the right way according to popper.js docs\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n  const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(null)\n\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\n    placement: \"bottom-start\",\n    strategy: \"fixed\",\n    modifiers: [\n      {\n        name: \"offset\",\n        enabled: true,\n        options: {\n          offset: [0, 5],\n        },\n      },\n      {\n        name: \"preventOverflow\",\n        enabled: true,\n        options: {\n          padding: 8,\n        },\n      },\n      {\n        name: \"flip\",\n        enabled: true,\n      },\n    ],\n  })\n\n  const handleOutsideClick = useCallback(\n    (event: MouseEvent) => {\n      if (!expanded) {\n        return\n      }\n      if (\n        referenceElement &&\n        (referenceElement.contains(event.target as Node) || referenceElement === event.target)\n      ) {\n        return\n      }\n      setExpanded(false)\n    },\n    [expanded, referenceElement],\n  )\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleOutsideClick)\n    return () => {\n      document.removeEventListener(\"click\", handleOutsideClick)\n    }\n  }, [handleOutsideClick])\n\n  return (\n    <div\n      className={css`\n        display: flex;\n        align-items: center;\n      `}\n    >\n      <button\n        aria-expanded={expanded}\n        ref={setReferenceElement}\n        onClick={() => {\n          setExpanded(!expanded)\n        }}\n        className={css`\n          background-color: transparent;\n          border: none;\n          color: ${baseTheme.colors.gray[400]};\n          cursor: pointer;\n          padding: 0 0.66em;\n          margin: 0 0.66em;\n          &:hover {\n            background-color: ${baseTheme.colors.clear[200]};\n            border-radius: 50px;\n          }\n        `}\n        aria-label={expanded ? t(\"close\") : t(\"dropdown-menu\")}\n      >\n        <DotsVertical size={16} weight=\"bold\" />\n      </button>\n      {expanded && (\n        <div\n          // eslint-disable-next-line react/forbid-dom-props\n          style={styles.popper}\n          {...attributes.popper}\n          className={css`\n            z-index: 200;\n          `}\n          ref={setPopperElement}\n        >\n          <ul\n            className={css`\n              box-shadow: 0px 8px 40px rgba(0, 0, 0, 0.1);\n              width: fit-content;\n              list-style: none;\n              padding: 0;\n              border-radius: 4px;\n              margin: 0;\n              font-size: 17px;\n\n              li + li {\n                border-top: 2px solid ${baseTheme.colors.clear[200]};\n              }\n\n              li:hover {\n                filter: brightness(92%) contrast(110%);\n              }\n            `}\n          >\n            {items\n              .filter((item) => item !== null)\n              .map((item) => {\n                if (item === null) {\n                  return null\n                }\n                return (\n                  <DropdownMenuItem\n                    key={item.label}\n                    item={item}\n                    closeMenu={() => {\n                      setExpanded(false)\n                    }}\n                  />\n                )\n              })}\n          </ul>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default DropdownMenu\n"],"names":[],"sourceRoot":""}