{"version":3,"file":"TextInput-stories.1518cff6.iframe.bundle.js","mappings":";;;;;AA+CA;AACA;;;;;;;;AAQA;;;;;;;;;;AAaA;AACA;;;AAOA;;AAcA;AAGA;;AASA;;;;;AAKA;AACA;AACA;;AAkCA","sources":["webpack://shared-module/./src/components/InputFields/TextField.tsx"],"sourcesContent":["import { css, cx } from \"@emotion/css\"\nimport styled from \"@emotion/styled\"\nimport React from \"react\"\nimport { FieldError, UseFormRegisterReturn } from \"react-hook-form\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { baseTheme } from \"../../styles\"\nimport { primaryFont } from \"../../styles/typography\"\nimport { errorToDescription } from \"../../utils/strings\"\n\ninterface TextFieldExtraProps {\n  name?: string\n  type?: \"email\" | \"password\" | \"text\" | \"number\" | \"color\"\n  label?: string\n  labelStyle?: string\n  hint?: string\n  error?: string | FieldError\n  placeholder?: string\n  required?: boolean\n  value?: string | number\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void\n  onChange?: (value: string, name?: string) => void\n  className?: string\n  disabled?: boolean\n  id?: string\n  defaultValue?: string\n  register?: UseFormRegisterReturn\n  min?: number\n  step?: string\n}\n\nconst ERRORCOLOR = baseTheme.colors.red[600]\nconst DEFAULTCOLOR = \"#dedede\"\n\ninterface InputExtraProps {\n  error?: string\n  disabled?: boolean\n  colorField?: boolean\n}\n\n// eslint-disable-next-line i18next/no-literal-string\nconst Input = styled.input<InputExtraProps>`\n  background: #fcfcfc;\n  border-width: 1.6px;\n  border-style: solid;\n  border-radius: 3px;\n  border-color: ${({ error }) => (error ? ERRORCOLOR : DEFAULTCOLOR)};\n  ${({ colorField }) => !colorField && \"padding: 8px 10px 10px 10px;\"}\n  transition: ease-in-out, width 0.35s ease-in-out;\n  outline: none;\n  min-width: 20px;\n  width: 100%;\n  display: block;\n  font-size: 17px;\n\n  ${({ disabled }) => disabled && `cursor: not-allowed;`}\n\n  &:focus,\n  &:active {\n    border-color: #55b3f5;\n  }\n\n  @media (max-width: 767.98px) {\n    padding: 6px 8px;\n  }\n`\n\n// eslint-disable-next-line i18next/no-literal-string\nconst errorClass = css`\n  color: ${baseTheme.colors.red[600]};\n  font-size: 14px;\n  display: inline-block;\n`\n\nexport type TextFieldProps = React.HTMLAttributes<HTMLInputElement> & TextFieldExtraProps\n\nconst TextField = ({\n  onChange,\n  className,\n  register,\n  disabled,\n  error,\n  ...rest\n}: TextFieldExtraProps) => {\n  const { t } = useTranslation()\n  return (\n    <div\n      className={cx(\n        css`\n          margin-bottom: 1rem;\n          ${disabled &&\n          `cursor: not-allowed;\n            filter: opacity(0.5);`}\n        `,\n        className,\n      )}\n    >\n      <label\n        aria-label={`${rest.label}${rest.required === true && ` (${t(\"required\")})`}`}\n        className={cx(\n          css`\n            color: #333;\n            font-family: ${primaryFont};\n            font-weight: 500;\n            font-size: 14px;\n            display: block;\n            margin-bottom: 2px;\n            ${disabled && `color: ${baseTheme.colors.gray[400]};`}\n            ${disabled && `cursor: not-allowed;`}\n          `,\n          rest.labelStyle,\n        )}\n      >\n        {rest.label && (\n          <>\n            {rest.label} {rest.required === true && ` *`}\n          </>\n        )}\n        <Input\n          id={rest.id}\n          name={rest.name}\n          disabled={disabled}\n          colorField={rest.type === \"color\"}\n          // eslint-disable-next-line i18next/no-literal-string\n          aria-errormessage={`${rest.id ?? rest.label}_error`}\n          aria-invalid={error !== undefined}\n          onChange={({ target: { value } }) => onChange && onChange(value)}\n          defaultValue={rest.defaultValue}\n          error={errorToDescription(error) ?? undefined}\n          {...rest}\n          // Register overrides onChange if specified\n          {...register}\n        />\n      </label>\n\n      <span\n        className={\n          error\n            ? cx(errorClass)\n            : css`\n                visibility: hidden;\n              `\n        }\n        id={`${rest.id ?? rest.label}_error`}\n        role=\"alert\"\n      >\n        {errorToDescription(error)}\n      </span>\n    </div>\n  )\n}\n\nexport default TextField\n"],"names":[],"sourceRoot":""}