{"version":3,"file":"CheckBox-stories.a8ebd013.iframe.bundle.js","mappings":";AAeA;;;;;;AAMA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;;AAkBA;;AAkBA;;;;AA2BA","sources":["webpack://shared-module/./src/components/InputFields/CheckBox.tsx"],"sourcesContent":["import { css, cx } from \"@emotion/css\"\nimport styled from \"@emotion/styled\"\nimport React, { forwardRef, InputHTMLAttributes } from \"react\"\n\nimport { baseTheme, primaryFont } from \"../../styles\"\n\nconst ERRORCOLOR = \"#F76D82\"\nconst DEFAULTCOLOR = \"#787878\"\n\ninterface LabelExtraProps {\n  error?: boolean\n}\n\n// eslint-disable-next-line i18next/no-literal-string\nconst Label = styled.label<LabelExtraProps>`\n  font-family: ${primaryFont};\n  font-size: 1.1rem;\n  line-height: 1.1;\n  display: grid;\n  grid-template-columns: 1em auto;\n  gap: 0.5em;\n  color: ${baseTheme.colors.gray[600]};\n\n  input[type=\"checkbox\"] {\n    appearance: none;\n    background-color: #fff;\n    margin: 0;\n    font: inherit;\n    width: 1.15em;\n    height: 1.1em;\n    border: 2px solid ${({ error }) => (error ? ERRORCOLOR : DEFAULTCOLOR)};\n    transform: translateY(-0.075em);\n    display: grid;\n    place-content: center;\n  }\n\n  input[type=\"checkbox\"]:hover {\n    background: #f9f9f9;\n  }\n\n  input[type=\"checkbox\"]:before {\n    content: \"\";\n    width: 0.65em;\n    height: 0.65em;\n    transform: scale(0);\n    transition: 120ms transform ease-in-out;\n    box-shadow: inset 1em 1em #fff;\n    clip-path: polygon(28% 38%, 41% 53%, 75% 24%, 86% 38%, 40% 78%, 15% 50%);\n  }\n\n  input[type=\"checkbox\"]:checked {\n    border-color: #37bc9b;\n    background: #37bc9b;\n  }\n  input[type=\"checkbox\"]:checked::before {\n    transform: scale(1);\n  }\n\n  input[type=\"checkbox\"]:disabled {\n    color: #959495;\n    cursor: not-allowed;\n  }\n`\n\nconst error = css`\n  color: #f76d82;\n  font-size: 14px;\n  display: inline-block;\n  margin-top: -15px;\n`\n\n// Error string might change in the future\n\nconst ERROR = \"Please check the secret box\"\n\nexport interface CheckboxProps extends InputHTMLAttributes<HTMLInputElement> {\n  label: string\n  error?: boolean\n  checked?: boolean\n  onChangeByValue?: (checked: boolean, name?: string) => void\n}\n\nconst CheckBox = forwardRef<HTMLInputElement, CheckboxProps>(\n  ({ onChangeByValue, onChange, className, checked, ...rest }: CheckboxProps, ref) => {\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (onChangeByValue) {\n        const {\n          target: { checked },\n        } = event\n        onChangeByValue(checked)\n      }\n      if (onChange) {\n        onChange(event)\n      }\n    }\n    return (\n      <div\n        className={cx(\n          css`\n            margin-bottom: 1rem;\n          `,\n          className,\n        )}\n      >\n        <Label>\n          <input\n            type=\"checkbox\"\n            checked={checked}\n            aria-errormessage={rest.error ? `${rest.label}_error` : undefined}\n            aria-invalid={rest.error !== undefined}\n            onChange={handleOnChange}\n            ref={ref}\n            {...rest}\n          />\n          <span>{rest.label}</span>\n        </Label>\n        {rest.error && (\n          <span\n            className={\n              rest.error\n                ? cx(error)\n                : css`\n                    visibility: hidden;\n                    height: 0;\n                    display: block;\n                  `\n            }\n            id={`${rest.id ?? rest.label}_error`}\n            role=\"alert\"\n          >\n            {ERROR}\n          </span>\n        )}\n      </div>\n    )\n  },\n)\n\nCheckBox.displayName = \"CheckBox\"\nexport default CheckBox\n"],"names":[],"sourceRoot":""}