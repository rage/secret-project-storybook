{"version":3,"file":"Card-stories.0f5c2be5.iframe.bundle.js","mappings":";AAeA;;;;AAMA;;ACFA;;;;;;;;;;;;;AAiBA;;;;AAIA;;;;;;;ACPA;;;;;;AAMA;;;;;AASA;AAcA;;;;;;;AAOA;;;;AASA;;;;;AAWA;;;;;;AASA;;;AAGA;;;;AAOA;;;AAGA;AAIA;;;AAGA;;;;;;;AAOA;;;AAGA;;;;ACjGA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;AAAA;AA8BA;;;;;;AAMA;;AASA;;;AAGA;;AASA;;;AAOA;;;AAGA;;;;AAOA;;AAKA;AAIA;AACA;;;;AC/FA;;;;;AAKA","sources":["webpack://shared-module/./src/components/Card/CardOpensText.tsx","webpack://shared-module/./src/components/Card/CardOpenTextOverlay.tsx","webpack://shared-module/./src/components/Card/IllustrationCard.tsx","webpack://shared-module/./src/components/Card/SimpleCard.tsx","webpack://shared-module/./src/components/Card/index.tsx"],"sourcesContent":["import { css, cx } from \"@emotion/css\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { secondaryFont } from \"../../styles\"\n\ninterface CardOpensTextProps {\n  open: boolean | undefined\n  date: string | undefined\n  time: string | undefined\n}\n\n// eslint-disable-next-line i18next/no-literal-string\n\n// eslint-disable-next-line i18next/no-literal-string\nconst styledspan = css`\n  font-family: ${secondaryFont} !important;\n  font-size: 0.9rem;\n  opacity: 0.8;\n  text-transform: uppercase;\n`\n\nconst CardOpensText: React.FC<\n  React.PropsWithChildren<React.PropsWithChildren<CardOpensTextProps>>\n> = ({ open, date, time }) => {\n  const { t } = useTranslation()\n  if (date && time) {\n    return (\n      <>\n        <div className={cx(styledspan)}>{t(\"available\")}</div>\n        <div>{t(\"on-date-at-time\", { date, time })}</div>\n      </>\n    )\n  } else if (time) {\n    return (\n      <>\n        <div className={cx(styledspan)}>{t(\"opens-in\")}</div>\n        <div>{time}</div>\n      </>\n    )\n  } else if (open) {\n    return <span className={cx(styledspan)}>{t(\"opens-now\")}</span>\n  } else {\n    return <span>{t(\"closed\")}</span>\n  }\n}\n\nexport default CardOpensText\n","import { css } from \"@emotion/css\"\n\nimport { respondToOrLarger } from \"../../styles/respond\"\n\nimport CardOpensText from \"./CardOpensText\"\n\ninterface CardOpensTextProps {\n  open: boolean | undefined\n  date: string | undefined\n  time: string | undefined\n}\n\nconst CardOpensTextOverlay: React.FC<\n  React.PropsWithChildren<React.PropsWithChildren<CardOpensTextProps>>\n> = ({ open, date, time }) => {\n  return (\n    <div\n      className={css`\n        position: relative;\n      `}\n    >\n      {!open && (\n        <div\n          className={css`\n            flex: 0 1 auto;\n            text-align: center;\n            background: #e2e4e6;\n            padding: 1rem 2rem;\n            position: absolute;\n            width: 100%;\n            z-index: 100;\n\n            color: #303030;\n            font-size: 0.8em;\n            font-weight: 500;\n\n            ${respondToOrLarger.md} {\n              font-size: 1em;\n              padding: 1.5rem;\n            }\n          `}\n        >\n          <CardOpensText open={open} date={date} time={time} />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default CardOpensTextOverlay\n","import { css } from \"@emotion/css\"\nimport styled from \"@emotion/styled\"\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { baseTheme, headingFont } from \"../../styles\"\nimport { cardMaxWidth } from \"../../styles/constants\"\nimport { respondToOrLarger } from \"../../styles/respond\"\n\nimport CardOpensTextOverlay from \"./CardOpenTextOverlay\"\n\nimport { CardExtraProps } from \".\"\n\nexport interface BackgroundProps {\n  bg: string | undefined\n  backgroundImage?: string\n}\n\nexport const BackgroundStyles = ({ bg }: BackgroundProps) => {\n  const CARD_BACKGROUND_STYLES = `\n    background-color: ${bg ? bg : \"#fff\"};\n  `\n  return CARD_BACKGROUND_STYLES\n}\n\n// eslint-disable-next-line i18next/no-literal-string\nconst CardContentWrapper = styled.div`\n  display: flex;\n  height: 100%;\n  text-align: left;\n  flex-direction: column;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  ${BackgroundStyles}\n\n  h2 {\n    font-weight: 600;\n    z-index: 20;\n    line-height: 1.2;\n    color: ${baseTheme.colors.gray[700]};\n    margin-top: 5px;\n    font-size: clamp(26px, 2.2vw, 30px);\n    opacity: 0.9;\n  }\n`\n\nexport type CardProps = React.HTMLAttributes<HTMLDivElement> & CardExtraProps\n\nconst IllustrationCard: React.FC<React.PropsWithChildren<React.PropsWithChildren<CardProps>>> = ({\n  title,\n  chapterNumber,\n  bg,\n  backgroundImage,\n  open,\n  date,\n  time,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <div\n      className={css`\n        max-width: ${cardMaxWidth}rem;\n        border-radius: 1px;\n        position: relative;\n        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n        background: #f2f2f2;\n        aspect-ratio: 1/1;\n        padding: 10px;\n      `}\n    >\n      <CardContentWrapper bg={bg}>\n        <CardOpensTextOverlay open={open} date={date} time={time} />\n        <div\n          className={css`\n            width: 100%;\n            height: 370.6px;\n            transition: transform 0.2s;\n            ${backgroundImage &&\n            `background-image: url(${backgroundImage});\n              background-repeat: no-repeat;\n              background-color: ${bg};\n              background-position: center center;\n              background-size: contain;\n              `}\n\n            &:hover {\n              transform: scale(1.1);\n            }\n          `}\n        ></div>\n        <div\n          className={css`\n            flex: 1 1 auto;\n            padding: 1rem;\n            position: relative;\n            background: #fff;\n\n            ${respondToOrLarger.md} {\n              padding: 2rem 2rem;\n            }\n          `}\n        >\n          <div\n            className={css`\n              position: absolute;\n              top: -15px;\n              left: 10px;\n              ${respondToOrLarger.md} {\n                left: 30px;\n              }\n            `}\n          >\n            <span\n              className={css`\n                font-family: ${headingFont};\n                min-width: 18px;\n                font-weight: 500;\n                color: ${baseTheme.colors.blue[600]} !important;\n                background: #edf1f4;\n                border: 3px solid #fff;\n                border-radius: 20px;\n                font-size: 0.7rem;\n                padding: 0.2rem 0.6rem 0.3rem 0.6rem;\n\n                ${respondToOrLarger.md} {\n                  font-size: 0.9rem;\n                }\n              `}\n            >\n              {t(\"chapter-chapter-number\", { number: chapterNumber })}\n            </span>\n          </div>\n\n          <h2>{title}</h2>\n        </div>\n      </CardContentWrapper>\n    </div>\n  )\n}\n\nexport default IllustrationCard\n","import { css } from \"@emotion/css\"\nimport styled from \"@emotion/styled\"\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport CardSVG from \"../../img/cardNext.svg\"\nimport { headingFont } from \"../../styles\"\nimport { cardMaxWidth } from \"../../styles/constants\"\nimport { respondToOrLarger } from \"../../styles/respond\"\n\nimport CardOpensTextOverlay from \"./CardOpenTextOverlay\"\n\nimport { CardExtraProps } from \".\"\n\nexport interface BackgroundProps {\n  bg: string | undefined\n}\n\nexport const BackgroundStyles = ({ bg }: BackgroundProps) => {\n  const CARD_BACKGROUND_STYLES = `\n    background-color: ${bg ? bg : \"#fff\"};\n  `\n  return CARD_BACKGROUND_STYLES\n}\nconst StCardSvg = styled(CardSVG)`\n  width: 40px;\n  opacity: 0.8;\n  color: #fff;\n`\n\n// eslint-disable-next-line i18next/no-literal-string\nconst CardContentWrapper = styled.div`\n  display: flex;\n  height: 100%;\n  text-align: left;\n  flex-direction: column;\n  overflow-wrap: break-word;\n  position: relative;\n  ${BackgroundStyles}\n\n  &:hover {\n    filter: brightness(1.1) contrast(0.9);\n  }\n\n  h2 {\n    z-index: 20;\n    color: #fff;\n    font-weight: 500;\n    line-height: 100%;\n    font-size: clamp(28px, 2.7rem, 46px);\n  }\n\n  span {\n    color: #f5f6f7;\n    font-size: clamp(16px, 1em, 20px);\n    opacity: 0.9;\n    z-index: 20;\n    font-weight: 500;\n    width: 50%;\n    line-height: 2.5em;\n  }\n`\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const StyledSVG = (Image: any) => {\n  return (\n    <Image\n      className={css`\n        position: absolute;\n        z-index: 99;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      `}\n    />\n  )\n}\n\nexport type CardProps = React.HTMLAttributes<HTMLDivElement> & CardExtraProps\n\nconst SimpleCard: React.FC<React.PropsWithChildren<React.PropsWithChildren<CardProps>>> = ({\n  title,\n  chapterNumber,\n  open,\n  date,\n  time,\n  bg,\n  backgroundImage,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <div\n      className={css`\n        max-width: ${cardMaxWidth}rem;\n        border-radius: 1px;\n        position: relative;\n        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n        background: #48cfad;\n        aspect-ratio: 1/1;\n      `}\n    >\n      <CardContentWrapper bg={bg}>\n        {backgroundImage && StyledSVG(backgroundImage)}\n        <CardOpensTextOverlay open={open} date={date} time={time} />\n        {open && (\n          <div\n            className={css`\n              padding: 2rem;\n              ${respondToOrLarger.lg} {\n                padding: 3rem;\n              }\n            `}\n          >\n            <StCardSvg />\n          </div>\n        )}\n\n        <div\n          className={css`\n            flex: 1;\n          `}\n        ></div>\n\n        <div\n          className={css`\n            flex: 1 1 auto;\n            padding: 2rem 2rem 3rem 2rem;\n            ${respondToOrLarger.lg} {\n              padding: 3rem 3rem 4rem 3rem;\n            }\n          `}\n        >\n          <div\n            className={css`\n              display: flex;\n              flex-direction: column;\n              height: 100%;\n            `}\n          >\n            <div\n              className={css`\n                margin-top: auto;\n              `}\n            >\n              <span\n                className={css`\n                  font-family: ${headingFont};\n                `}\n              >\n                {t(\"chapter-chapter-number\", { number: chapterNumber })}\n              </span>\n              <h2>{title}</h2>\n            </div>\n          </div>\n        </div>\n      </CardContentWrapper>\n    </div>\n  )\n}\n\nexport default SimpleCard\n","import { css } from \"@emotion/css\"\nimport React from \"react\"\n\nimport { baseTheme } from \"../../styles\"\nimport basePath from \"../../utils/base-path\"\n\nimport IllustrationCard from \"./IllustrationCard\"\nimport SimpleCard from \"./SimpleCard\"\n\n// type CourseCardProps = {\n//   title: string\n//   description: string\n//   languages: string\n// }\n\nexport interface CardExtraProps {\n  variant: \"simple\" | \"illustration\" | \"course\"\n  title: string\n  chapterNumber: number\n  url?: string\n  bg?: string\n  open?: boolean\n  allowedToPreview?: boolean\n  date?: string\n  time?: string\n  description?: string\n  languages?: string\n  backgroundImage?: string | null\n}\n\nexport type CardProps = React.ButtonHTMLAttributes<HTMLDivElement> & CardExtraProps\n\nconst variantToComponent = {\n  simple: SimpleCard,\n  course: SimpleCard,\n  illustration: IllustrationCard,\n}\n\nconst Card: React.FC<React.PropsWithChildren<React.PropsWithChildren<CardProps>>> = (props) => {\n  const Component = variantToComponent[props.variant]\n\n  if (props.url && (props.open || props.allowedToPreview)) {\n    return (\n      // This should be a next/link but there's a weird problem in firefox if you this when it's next/link\n      // and navigate back straight away, if you click this the click won't register but will just scroll the\n      // page up\n      <a\n        href={basePath() + props.url}\n        className={css`\n          text-decoration: none;\n          display: block;\n          &:focus-visible {\n            outline: 4px solid ${baseTheme.colors.green[500]};\n            outline-offset: 2px;\n          }\n          transition: filter 0.2s;\n          filter: brightness(1) contrast(1);\n        `}\n      >\n        <Component {...props} />\n      </a>\n    )\n  }\n\n  return <Component {...props} />\n}\n\nexport default Card\n"],"names":[],"sourceRoot":""}