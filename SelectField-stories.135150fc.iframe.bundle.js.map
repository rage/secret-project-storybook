{"version":3,"file":"SelectField-stories.135150fc.iframe.bundle.js","mappings":";;AA+CA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;AAMA","sources":["webpack://shared-module/./src/components/InputFields/SelectField.tsx"],"sourcesContent":["import { css, cx } from \"@emotion/css\"\nimport React from \"react\"\nimport { UseFormRegisterReturn } from \"react-hook-form\"\n\ninterface SelectOption<T extends string> {\n  value: T\n  label: string\n  disabled?: boolean\n}\n\ninterface SelectMenuExtraProps<T extends string> {\n  id: string\n  label?: string\n  labelStyle?: string\n  name?: string\n  placeholder?: string\n  error?: string\n  value?: string\n  defaultValue?: T\n  options: SelectOption<T>[]\n  onBlur?: (event: React.FocusEvent<HTMLSelectElement>) => void\n  onChange?: (value: T, name?: string) => void\n  className?: string\n  register?: UseFormRegisterReturn\n  disabled?: boolean\n}\n\nexport type SelectMenuProps<T extends string> = React.HTMLAttributes<HTMLInputElement> &\n  SelectMenuExtraProps<T>\n\nconst SelectField = <T extends string>({\n  id,\n  label,\n  onChange,\n  onBlur,\n  defaultValue,\n  options,\n  className,\n  register,\n  disabled,\n  ...rest\n}: SelectMenuExtraProps<T>) => {\n  return (\n    <div\n      className={cx(\n        css`\n          margin-bottom: 1rem;\n          ${disabled && \"opacity: 0.5;\"}\n          select {\n            appearance: none;\n            background-color: transparent;\n            border: none;\n            margin: 0;\n            width: 100%;\n            font-family: inherit;\n            font-size: inherit;\n            cursor: ${disabled ? \"default\" : \"pointer\"};\n            line-height: inherit;\n            z-index: 1;\n            outline: none;\n            padding: 8px 10px 10px 10px;\n          }\n\n          select,\n          .select:after {\n            grid-area: select;\n          }\n\n          .select {\n            width: 100%;\n            border: 1px solid #e0e0e0;\n            border-radius: 3px;\n            font-size: 17px;\n            cursor: ${disabled ? \"default\" : \"pointer\"};\n            background: #f9f9f9;\n            display: grid;\n            grid-template-areas: \"select\";\n            align-items: center;\n\n            @media (max-width: 767.98px) {\n              padding: 6px 8px;\n            }\n          }\n\n          .select::after {\n            content: \"\";\n            justify-self: end;\n            align-self: center;\n            width: 0.8em;\n            margin-right: 10px;\n            height: 0.8em;\n            line-height: 0;\n            background-color: #333;\n            clip-path: polygon(52% 80%, 0 20%, 100% 20%);\n          }\n          label {\n            color: #333;\n            font-size: 14px;\n            font-weight: 500;\n            ${rest.labelStyle}\n          }\n\n          .select + label {\n            margin-top: 2rem;\n          }\n        `,\n        className,\n      )}\n    >\n      {label && <label htmlFor={id}>{label}</label>}\n      <div className=\"select\">\n        <select\n          disabled={Boolean(disabled)}\n          id={id}\n          onChange={({ target: { value } }) => onChange && onChange(value as T)}\n          onBlur={onBlur}\n          defaultValue={defaultValue}\n          {...rest}\n          // Register overrides onChange if specified\n          {...register}\n        >\n          {options.map(({ value, label, disabled }) => (\n            <option value={value} key={label} disabled={disabled} selected={disabled && true}>\n              {label}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  )\n}\n\nexport default SelectField\n"],"names":[],"sourceRoot":""}