{"version":3,"file":"Reference-stories.67ad3799.iframe.bundle.js","mappings":";;;AAYA;;;AAKA;;;;;;;AAOA;AACA;;;;;;;;AAQA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA;AAsHA;AACA;;;;;;ACjKA","sources":["webpack://shared-module/./src/components/Reference.tsx","webpack://shared-module/"],"sourcesContent":["import { css, keyframes } from \"@emotion/css\"\nimport styled from \"@emotion/styled\"\nimport React, { useEffect, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { baseTheme } from \"../styles\"\n\nconst openAnimation = keyframes`\n0% { opacity: 0; }\n100% { opacity: 1; }\n`\n\nconst slideDown = keyframes`\nfrom { opacity: 0; height: 0; padding: 0;}\nto { opacity: 1; height: 100%; padding: 10px;}\n`\n// eslint-disable-next-line i18next/no-literal-string\nconst TextWrapper = styled.div`\n  padding: 0;\n  margin: 0;\n  margin-top: 4rem;\n  background: rgb(242, 245, 247);\n\n  details[open] summary ~ * {\n    animation: ${openAnimation} 0.3s ease-in-out;\n    color: ${baseTheme.colors.gray[700]};\n  }\n\n  details {\n    border-left: 4px solid #90abc3;\n  }\n\n  details[open] > div {\n    animation-name: ${slideDown};\n    animation-duration: 0.3s;\n    animation-fill-mode: forwards;\n  }\n\n  details summary {\n    padding: 1.4rem 1rem 1.4rem 3.5rem;\n    position: relative;\n    cursor: pointer;\n    font-size: 1.8rem;\n    font-weight: 400;\n    font-family: \"Josefin Sans\", sans-serif;\n    list-style: none;\n    outline: 0;\n    height: auto;\n    color: ${baseTheme.colors.gray[700]};\n    justify-content: center;\n  }\n\n  details summary::-webkit-details-marker {\n    display: none;\n  }\n\n  details[open] > summary {\n    color: #1c1c1c;\n  }\n\n  details summary:after {\n    content: \"+\";\n    color: #6b8faf;\n    position: absolute;\n    font-size: 3rem;\n    line-height: 0.3;\n    margin-top: 0.75rem;\n    left: 20px;\n    font-weight: 200;\n    transform-origin: center;\n    transition: all 200ms linear;\n  }\n  details[open] summary:after {\n    transform: rotate(45deg);\n    font-size: 3rem;\n  }\n\n  ul {\n    padding: 0 4.5rem 3rem 4.5rem;\n    counter-reset: ref;\n  }\n\n  details ul li {\n    counter-increment: ref;\n    font-size: 1.2rem;\n    line-height: 1.6;\n    margin: 1rem 0 1rem 0.2rem;\n    padding-left: 8px;\n    list-style-position: outside;\n  }\n\n  ul li::marker {\n    display: list-item;\n    content: \"[\" counter(ref) \"]\";\n    text-align: center;\n    margin-left: 2rem !important;\n  }\n`\n\ninterface Reference {\n  id: string\n  text: string\n}\n\nexport interface ReferenceExtraProps {\n  data: Reference[]\n}\n\nconst ELEMENT_CLASS = \"#reference\"\nconst BEHAVIOR = \"smooth\"\n\nexport type ReferenceProps = React.HTMLAttributes<HTMLDivElement> & ReferenceExtraProps\n\nconst Reference: React.FC<React.PropsWithChildren<React.PropsWithChildren<ReferenceProps>>> = ({\n  data,\n}) => {\n  const { t } = useTranslation()\n  const [reference, setReference] = useState<Reference[]>([])\n  const [active, setActive] = useState<string>()\n\n  useEffect(() => {\n    const arr: Reference[] = []\n    // eslint-disable-next-line i18next/no-literal-string\n    const referenceEl = Array.from(document.querySelectorAll<HTMLElement>(\"sup\"))\n\n    referenceEl.forEach((ref) => {\n      const { innerText: text } = ref\n      const { dataset } = ref\n      const id = dataset.citationId || \"\"\n      ref.style\n      arr.push({ id, text })\n    })\n    setReference(arr)\n  }, [])\n\n  useEffect(() => {\n    // eslint-disable-next-line i18next/no-literal-string\n    const references = document.querySelectorAll(\".reference\")\n\n    const eventHandler = (evt: Event) => {\n      // eslint-disable-next-line i18next/no-literal-string\n      let citation = null\n      if (evt.target instanceof Element) {\n        citation = evt.target\n      } else {\n        return\n      }\n\n      // @ts-expect-error: Type not aware of the field\n      const citationId = citation?.parentNode?.dataset.citationId || \"\"\n      const el = data.find((item) => item.id === citationId)\n\n      if (el) {\n        // eslint-disable-next-line i18next/no-literal-string\n        const wrapper = document.createElement(\"div\")\n        // eslint-disable-next-line i18next/no-literal-string\n        wrapper.setAttribute(\"id\", \"wrapper\")\n\n        const wrapperEl = document.getElementById(\"wrapper\")\n\n        if (evt.type === \"mouseover\") {\n          // @ts-expect-error: Type not aware of the field\n          citation.style.cssText = \"text-decoration: underline; color: #08457A; cursor: pointer\"\n          wrapper.style.cssText =\n            \"opacity: 1; z-index: 2; position: absolute; top: 20px; left: 50%; border-radius: 3px; min-width: 400px; transition: visibility 0s linear 100ms, opacity 100ms; box-shadow: rgba(0, 0, 0, 0.1) 0 2px 10px;\"\n          // eslint-disable-next-line i18next/no-literal-string\n          wrapper.innerHTML = `<div style=\"color: #313947; border: 1px solid #E2E4E6; border-radius: 3px; font-family: 'Lato', sans-serif; font-size: 14px; background: #F9f9f9; padding: 0 5px;\">${el.text}</div`\n          wrapperEl && wrapperEl.remove()\n          citation?.appendChild(wrapper)\n        } else if (evt.type === \"mouseout\") {\n          // @ts-expect-error: Type not aware of the field\n          citation.style.cssText = \"text-decoration: none; color: #46749B;\"\n          wrapperEl && wrapperEl.remove()\n        }\n      }\n    }\n\n    references.forEach((ref) => {\n      ref.addEventListener(\"mouseover\", eventHandler)\n      ref.addEventListener(\"mouseout\", eventHandler)\n\n      return () => {\n        ref.removeEventListener(\"mouseover\", eventHandler)\n        ref.removeEventListener(\"mouseout\", eventHandler)\n      }\n    })\n  }, [data, reference])\n\n  useEffect(() => {\n    const eventHandler = (evt: MouseEvent) => {\n      const target = evt.target as HTMLInputElement\n      if (reference) {\n        reference.forEach(({ text }) => {\n          let elementId = target.innerText.substring(0, text.length)\n          if (text === elementId) {\n            evt.preventDefault()\n            elementId = elementId.substring(1, elementId.length - 1)\n            const details = document.querySelector<HTMLDetailsElement>(ELEMENT_CLASS)\n            // eslint-disable-next-line i18next/no-literal-string\n            setActive(`ref-${elementId}`)\n\n            if (details) {\n              if (!details.open) {\n                details.open = true\n              }\n            }\n            document.querySelector(`#ref-${elementId}`)?.scrollIntoView({\n              behavior: BEHAVIOR,\n            })\n          }\n        })\n      }\n    }\n\n    window.addEventListener(\"click\", eventHandler)\n    return () => {\n      window.removeEventListener(\"click\", eventHandler)\n    }\n  }, [reference])\n\n  return (\n    <TextWrapper>\n      <details id=\"reference\">\n        <summary>{t(\"title-references\")}</summary>\n        <ul>\n          {data.map(({ id, text }, index) => {\n            return (\n              <li\n                key={id}\n                id={`ref-${index + 1}`}\n                className={css`\n                  ${active === `ref-${index + 1}` && `background: #DAE3EB;`}\n                `}\n              >\n                {text}\n              </li>\n            )\n          })}\n        </ul>\n      </details>\n    </TextWrapper>\n  )\n}\n\nexport default Reference\n"],"names":[],"sourceRoot":""}