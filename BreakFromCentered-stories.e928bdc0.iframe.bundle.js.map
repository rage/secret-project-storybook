{"version":3,"file":"BreakFromCentered-stories.e928bdc0.iframe.bundle.js","mappings":";;;;AAgCA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;;;AAYA;AACA;AACA;AACA;;;;;;AAeA;AACA;;;;ACmFA;;;;AAoBA;;;;;;;;;;;AAiBA;;;;AAMA;;AAMA;;;;AAoBA;;;;;;;;;;;AAiBA;;;;AAMA;;AAMA;;;;AAoBA;ACzQA;;;;;AAKA;;;AAMA;AACA;;;;;AAKA;;;AASA","sources":["webpack://shared-module/./src/components/Centering/BreakFromCentered.tsx","webpack://shared-module/","webpack://shared-module/./src/components/Centering/Centered.tsx"],"sourcesContent":["import { css } from \"@emotion/css\"\nimport React from \"react\"\n\ninterface NoSidebar {\n  sidebar: false\n}\n\nexport interface WithSidebar {\n  sidebar: true\n  sidebarPosition: \"left\" | \"right\"\n  sidebarWidth: string\n  sidebarThreshold?: string\n}\n\nexport type BreakFromCenteredProps = NoSidebar | WithSidebar\n\nconst BreakFromCentered: React.FC<\n  React.PropsWithChildren<React.PropsWithChildren<BreakFromCenteredProps>>\n> = (props) => {\n  // 100vw unfortunately does not take into account the scrollbar width, so we need to calculate its width and substract it from the width of the page\n  let scrollbarWidth = 0\n  if (typeof window !== \"undefined\") {\n    scrollbarWidth = Math.abs(window.innerWidth - document.documentElement.clientWidth) / 2\n  }\n  if (props.sidebar) {\n    if (props.sidebarThreshold) {\n      return (\n        <div\n          className={css`\n            position: relative;\n            left: 50%;\n            right: 50%;\n            margin-left: calc(-50vw + ${props.sidebarWidth} / 2);\n            margin-right: calc(-50vw + ${props.sidebarWidth} / 2);\n            width: calc(100vw - ${props.sidebarWidth} - ${scrollbarWidth}px);\n\n            @media (max-width: ${props.sidebarThreshold}) {\n              margin-left: -50vw;\n              margin-right: -50vw;\n              width: calc(100vw - ${scrollbarWidth}px);\n            }\n          `}\n        >\n          {props.children}\n        </div>\n      )\n    } else {\n      return (\n        <div\n          className={css`\n            position: relative;\n            left: 50%;\n            right: 50%;\n            margin-left: calc(-50vw + ${props.sidebarWidth} / 2);\n            margin-right: calc(-50vw + ${props.sidebarWidth} / 2);\n            width: calc(100vw - ${props.sidebarWidth} - ${scrollbarWidth}px);\n          `}\n        >\n          {props.children}\n        </div>\n      )\n    }\n  }\n  return (\n    <div\n      className={css`\n        position: relative;\n        left: 50%;\n        right: 50%;\n        margin-left: -50vw;\n        margin-right: -50vw;\n        width: calc(100vw - ${scrollbarWidth}px);\n      `}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nexport default BreakFromCentered\n",null,"import { css } from \"@emotion/css\"\nimport React from \"react\"\n\nimport { narrowContainerWidthRem, normalContainerWidthRem } from \"../../styles/constants\"\nimport { respondToOrLarger } from \"../../styles/respond\"\n\n// eslint-disable-next-line i18next/no-literal-string\nexport const defaultWidthCenteredComponentStyles = css`\n  max-width: ${normalContainerWidthRem}rem;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0rem 1.375rem;\n  margin-bottom: 1.25rem;\n  ${respondToOrLarger.xl} {\n    padding: 0rem;\n  }\n`\n\n// eslint-disable-next-line i18next/no-literal-string\nexport const narrowWidthCenteredComponentStyles = css`\n  max-width: ${narrowContainerWidthRem}rem;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0rem 1.375rem;\n  margin-bottom: 1.25rem;\n  ${respondToOrLarger.md} {\n    padding: 0rem;\n  }\n`\n\nexport interface CenteredProps {\n  variant: \"default\" | \"narrow\"\n}\n\nconst Centered: React.FC<React.PropsWithChildren<React.PropsWithChildren<CenteredProps>>> = ({\n  children,\n  variant,\n}) => {\n  if (variant === \"narrow\") {\n    return <div className={narrowWidthCenteredComponentStyles}>{children}</div>\n  } else {\n    return <div className={defaultWidthCenteredComponentStyles}>{children}</div>\n  }\n}\n\nexport default Centered\n"],"names":[],"sourceRoot":""}