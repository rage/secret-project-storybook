{"version":3,"file":"DateTimeLocal-stories.48e1e930.iframe.bundle.js","mappings":";;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;;;;;;;AAOA;;;AAqBA","sources":["webpack://shared-module/./src/components/InputFields/DateTimeLocal.tsx"],"sourcesContent":["import { css, cx } from \"@emotion/css\"\nimport React, { forwardRef, InputHTMLAttributes, useState } from \"react\"\n\nimport { baseTheme } from \"../../styles\"\nimport { dateToString } from \"../../utils/time\"\n\nconst error = css`\n  color: #f76d82;\n  font-size: 14px;\n  display: inline-block;\n  margin-top: -15px;\n`\n\nexport interface TimePickerProps extends InputHTMLAttributes<HTMLInputElement> {\n  label: string\n  onChangeByValue?: (value: string, name?: string) => void\n  error?: string\n  defaultValue?: string\n  className?: string\n}\n\nconst DateTimeLocal = forwardRef<HTMLInputElement, TimePickerProps>(\n  ({ onChangeByValue, onChange, className, defaultValue, ...rest }: TimePickerProps, ref) => {\n    const [value, setValue] = useState<string>(defaultValue ?? \"\")\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (onChangeByValue) {\n        const {\n          target: { value },\n        } = event\n        onChangeByValue(value)\n      }\n      if (onChange) {\n        onChange(event)\n      }\n      setValue(event.target.value)\n    }\n    return (\n      <div\n        className={cx(\n          css`\n            margin-bottom: 1rem;\n\n            label {\n              display: grid;\n\n              input {\n                padding: 8px 10px 10px 10px;\n                border: 2px solid #dedede;\n                border-radius: 3px;\n                outline: none;\n\n                &:focus,\n                &:active {\n                  border-color: #55b3f5;\n                }\n\n                @media (max-width: 767.98px) {\n                  padding: 6px 8px;\n                }\n              }\n\n              span {\n                color: #333;\n                font-size: 14px;\n                font-weight: 500;\n                margin-bottom: 0.2rem;\n              }\n            }\n\n            small {\n              color: ${baseTheme.colors.gray[500]};\n              font-size: 12px;\n              text-align: left;\n              width: 100%;\n              display: block;\n              padding-left: 5px;\n            }\n          `,\n          className,\n        )}\n      >\n        <label>\n          <span>{rest.label}</span>\n          <input\n            ref={ref}\n            type=\"datetime-local\"\n            step=\"1\"\n            {...rest}\n            onChange={handleOnChange}\n            value={value}\n          />\n        </label>\n\n        {value && (\n          <small\n            className={css`\n              display: block;\n              height: 18px;\n            `}\n          >\n            {dateToString(new Date(value))}\n          </small>\n        )}\n\n        {rest.error && (\n          <span className={cx(error)} id={`${rest.label}_error`} role=\"alert\">\n            {rest.error}\n          </span>\n        )}\n      </div>\n    )\n  },\n)\nDateTimeLocal.displayName = \"DateTimeLocal\"\n\nexport default DateTimeLocal\n"],"names":[],"sourceRoot":""}