{"version":3,"file":"TextArea-stories.3014a19e.iframe.bundle.js","mappings":";;;;;;;;;;AAwFA;;;;;;;;;AASA","sources":["webpack://shared-module/./src/components/InputFields/TextAreaField.tsx"],"sourcesContent":["import { css, cx } from \"@emotion/css\"\nimport React, { forwardRef, TextareaHTMLAttributes, useEffect, useRef } from \"react\"\nimport { FieldError } from \"react-hook-form\"\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n  label?: string\n  errorMessage?: string\n  error?: string | FieldError\n  onChangeByValue?: (value: string, name?: string) => void\n  autoResize?: boolean\n  resize?: \"none\" | \"both\" | \"horizontal\" | \"vertical\" | \"block\" | \"inline\"\n}\n\nfunction updateHeight(ref: React.RefObject<HTMLTextAreaElement>) {\n  if (ref.current) {\n    // eslint-disable-next-line i18next/no-literal-string\n    ref.current.style.height = \"auto\"\n    // eslint-disable-next-line i18next/no-literal-string\n    ref.current.style.height = `${ref.current.scrollHeight + 5}px`\n  }\n}\n\nconst useCombinedRefs = (\n  fwdRef: React.ForwardedRef<HTMLTextAreaElement>,\n  innerRef: React.MutableRefObject<HTMLTextAreaElement | null>,\n) => {\n  React.useEffect(() => {\n    ;[innerRef, fwdRef].forEach((ref) => {\n      if (ref) {\n        if (typeof ref === \"function\") {\n          ref(innerRef.current || null)\n        } else {\n          ref.current = innerRef.current || null\n        }\n      }\n    })\n  }, [innerRef, fwdRef])\n  return innerRef\n}\nconst TextAreaField = forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  (\n    {\n      onChangeByValue,\n      onChange,\n      className,\n      autoResize,\n      resize = \"vertical\",\n      ...rest\n    }: TextAreaProps,\n    ref,\n  ) => {\n    const textareaRef = useRef<HTMLTextAreaElement>(null)\n    const combinedRef = useCombinedRefs(ref, textareaRef)\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      if (onChangeByValue) {\n        const {\n          target: { value },\n        } = event\n        onChangeByValue(value)\n      }\n      if (onChange) {\n        onChange(event)\n      }\n      if (autoResize) {\n        updateHeight(textareaRef)\n      }\n    }\n    useEffect(() => {\n      // This auto-resizes the textarea if the feature is enabled\n      if (!autoResize || !textareaRef.current) {\n        return\n      }\n      updateHeight(textareaRef)\n    }, [ref, rest.value, autoResize])\n    return (\n      <div\n        className={cx(\n          css`\n            margin-bottom: 1rem;\n\n            label {\n              display: grid;\n\n              textarea {\n                background: #fcfcfc;\n                border: 1.6px solid #dedede;\n                padding: 10px 12px;\n                resize: ${resize};\n              }\n              span {\n                color: #333;\n                font-size: 14px;\n                font-weight: 500;\n                margin-bottom: 0.2rem;\n              }\n            }\n          `,\n          className,\n        )}\n      >\n        <label>\n          <span>{rest.label}</span>\n          <textarea\n            ref={combinedRef}\n            onChange={handleOnChange}\n            /* onKeyPress={(event) => onKeyPress(event)} */\n            defaultValue={rest.defaultValue}\n            {...rest}\n          />\n        </label>\n      </div>\n    )\n  },\n)\n\nTextAreaField.displayName = \"TextAreaField\"\nexport default TextAreaField\n"],"names":[],"sourceRoot":""}