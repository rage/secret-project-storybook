{"version":3,"file":"Forum-stories.7297db61.iframe.bundle.js","mappings":";;;;;;AA4BA;;AAGA;;;;;AAMA;;;;AAKA;;;;AAMA;;;;;;;;AAUA;;AAiBA;;;AC9DA;;;;;;;;AASA;;AAGA;;;;;AAMA;;;;;AAMA;;;;;;;;;AAUA;;AAGA;;AAGA;;;;;;AAOA;;;;;;AAOA;;;;;;;;AASA;;AAGA;;AAGA;;;;;;;;AAsBA;;AAqEA;;AAMA;;AC3KA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;AAIA;;;;;;;;;AAgBA;;;AAOA;;;;;;;;;;ACwBA;;;;;;;;;AASA","sources":["webpack://shared-module/./src/components/Forum/Forum.tsx","webpack://shared-module/./src/components/Forum/Thread.tsx","webpack://shared-module/./src/components/InputFields/RadioButton.tsx","webpack://shared-module/./src/components/InputFields/TextAreaField.tsx"],"sourcesContent":["/* eslint-disable i18next/no-literal-string */\nimport styled from \"@emotion/styled\"\nimport React, { useRef, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport RadioButton from \"../InputFields/RadioButton\"\nimport TextAreaField from \"../InputFields/TextAreaField\"\n\nimport Thread from \"./Thread\"\n\nconst placeholder = `Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has\nbeen the industry's standard dummy text ever since the 1500s, when an unknown printer took\na galley of type and scrambled it to make a type specimen book. It has survived not only\nfive centuries, but also the leap into electronic typesetting, remaining essentially\nunchanged.`\n\nconst authorObject = {\n  id: \"1001\",\n  text: placeholder,\n  time: \"12hr ago\",\n}\nconst Wrapper = styled.div`\n  background: #fff;\n  width: 60%;\n  height: auto;\n  border: 2px solid rgba(205, 205, 205, 0.8);\n  border-radius: 4px;\n`\nconst Head = styled.div`\n  border-bottom: 1px solid rgba(205, 205, 205, 0.6);\n`\nconst CommentSection = styled.form`\n  width: 100%;\n  height: auto;\n  border-top: 1px solid rgba(205, 205, 205, 0.6);\n  padding: 2rem;\n`\nconst Label = styled.span`\n  color: #333;\n  opacity: 0.5;\n  font-size: 16px;\n`\nconst RadioSection = styled.div`\n  display: flex;\n  margin-top: 0.2rem;\n  margin-bottom: 1rem;\n`\n\nconst StyledButton = styled.input`\n  display: flex;\n  border: none;\n  align-self: end;\n  padding: 0.5rem 2rem;\n  font-size: 18px;\n  color: #313947;\n  margin-top: 1.5rem;\n`\n\nconst StRadio = styled(RadioButton)`\n  margin-right: 1rem !important;\n`\nexport interface Item {\n  id: string\n  text: string\n  time: string\n  author: string\n}\n\nexport interface Thread {\n  id: string\n  text: string\n  time: string\n  items?: Item[]\n}\n\nconst Forum = () => {\n  const [state, setState] = useState<Thread[]>([])\n  const [visibility, setVisibility] = useState(\"hide\")\n  const [clicked, setClicked] = useState(false)\n  const selectedId = useRef(\"\")\n\n  const current = new Date()\n\n  const { t } = useTranslation()\n\n  const handleClick = (event: React.MouseEvent<HTMLInputElement>) => {\n    setClicked(!clicked)\n    const target = event.target as HTMLInputElement\n    selectedId.current = target.id\n  }\n\n  const handleReply = (e: React.SyntheticEvent) => {\n    e.preventDefault()\n    const target = e.target as typeof e.target & {\n      reply: { value: string }\n    }\n\n    const reply = target.reply.value\n\n    setState((prevState) => {\n      return prevState.map((item) => {\n        const { items } = item\n        return item.id === selectedId.current\n          ? {\n              ...item,\n              items: [\n                {\n                  id: current.toLocaleString(),\n                  text: reply,\n                  time: current.toLocaleString(),\n                  author: \"Anonymous\",\n                },\n                ...(items ? items : []),\n              ],\n            }\n          : item\n      })\n    })\n    setClicked(false)\n    target.reply.value = \"\"\n  }\n\n  return (\n    <Wrapper>\n      <Head>\n        <Thread state={authorObject} author={\"Henrik Ngyren\"} />\n      </Head>\n      {state?.map((obj) => (\n        <Thread\n          key={obj.id}\n          state={obj}\n          author={visibility === \"hide\" ? \"Anonymous\" : \"Sebastien\"}\n          handleReply={handleReply}\n          handleClick={handleClick}\n          selectedId={selectedId.current}\n          clicked={clicked}\n        />\n      ))}\n      <CommentSection\n        onSubmit={(e: React.SyntheticEvent) => {\n          e.preventDefault()\n          const target = e.target as typeof e.target & {\n            comment: { value: string }\n            visibility: { value: string }\n          }\n\n          const comment = target.comment.value\n          const visible = target.visibility.value\n\n          setState((state) => [\n            ...state,\n            {\n              id: String(current.toLocaleTimeString()),\n              text: comment,\n              time: current.toLocaleString(),\n              item: [],\n            },\n          ])\n          setVisibility(visible)\n          target.comment.value = \"\"\n        }}\n      >\n        <Label>Select name visibility: </Label>\n        <RadioSection>\n          <StRadio\n            name=\"visibility\"\n            label=\"show name\"\n            value={t(\"show\")}\n            checked={visibility === \"show\"}\n            onChange={(_event) => setVisibility(\"show\")}\n          />\n          <RadioButton\n            name=\"visibility\"\n            label=\"hide name\"\n            value={t(\"hide\")}\n            onChange={(_event) => setVisibility(\"hide\")}\n            checked={visibility === \"hide\"}\n          />\n        </RadioSection>\n        <TextAreaField name=\"comment\" placeholder={t(\"leave-a-comment\")} onChange={() => null} />\n        <StyledButton type=\"submit\" name=\"submit\" value={t(\"submit\")} />\n      </CommentSection>\n    </Wrapper>\n  )\n}\n\nexport default Forum\n","import { css } from \"@emotion/css\"\nimport styled from \"@emotion/styled\"\nimport React, { Fragment } from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport TextAreaField from \"../InputFields/TextAreaField\"\n\nimport { Item, Thread as StateProps } from \"./Forum\"\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: auto;\n`\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 2rem 2rem 1.6rem 2rem;\n\n  h2 {\n    align-self: end;\n  }\n`\nconst Content = styled.div`\n  padding: 0 2rem;\n`\nconst Text = styled.p`\n  font-size: 20px;\n  line-height: 140%;\n  font-weight: 500;\n  padding-bottom: 0rem;\n`\nconst Footer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 1.5rem 0 3rem 0;\n  align-items: center;\n`\nconst Author = styled.div`\n  display: flex;\n\n  span {\n    margin-right: 10px;\n    color: #535a66;\n    font-size: 20px;\n    align-self: center;\n  }\n`\nconst ActionTab = styled.div`\n  display: flex;\n`\nconst ChatIcon = styled.div`\n  display: flex;\n`\nconst PlaceholderAvatar = styled.div`\n  background: #f3f3f3;\n  border-radius: 100%;\n  height: 35px;\n  width: 35px;\n  margin-right: 10px;\n`\nconst PlaceholderIcon = styled.div`\n  background: #f3f3f3;\n  border-radius: 100%;\n  height: 30px;\n  width: 30px;\n  margin-right: 10px;\n`\nconst StyledReplyIcon = styled.div`\n  display: flex;\n  margin: 0 1.5rem;\n  cursor: pointer;\n\n  span {\n    color: #535a66;\n  }\n`\nconst StyledReportIcon = styled.span`\n  color: #b66757;\n`\nconst TimeLabel = styled.span`\n  color: #535a66;\n`\nconst StyledButton = styled.input`\n  display: flex;\n  border: none;\n  align-self: end;\n  padding: 0.5rem 2rem;\n  font-size: 18px;\n  color: #313947;\n  margin: 1rem 0;\n`\n\ninterface ThreadProps {\n  state: StateProps\n  author: string\n  handleReply?: (e: React.SyntheticEvent) => void\n  clicked?: boolean\n  selectedId?: string\n  handleClick?: (event: React.MouseEvent<HTMLInputElement>) => void\n}\n\nconst REPLY = \"reply\"\nconst SUBMIT = \"submit\"\n\nconst Thread: React.FC<React.PropsWithChildren<React.PropsWithChildren<ThreadProps>>> = (props) => {\n  const {\n    state: { items },\n  } = props\n\n  return (\n    <Fragment>\n      {GetThread(props)}\n      {items?.map((item) => GetNestedThread(item))}\n    </Fragment>\n  )\n}\n\nconst GetThread = (props: ThreadProps) => {\n  const { t } = useTranslation()\n  const { state, author, handleReply, handleClick, clicked, selectedId } = props\n\n  const { id, text, time } = state\n  return (\n    text && (\n      <Wrapper key={text}>\n        <Header>\n          <Author>\n            <PlaceholderAvatar></PlaceholderAvatar>\n            <span>{author}</span>\n          </Author>\n          <TimeLabel>{time}</TimeLabel>\n        </Header>\n        <Content>\n          <Text>{text}</Text>\n          <Footer>\n            <ActionTab>\n              <PlaceholderIcon></PlaceholderIcon>\n              <PlaceholderIcon></PlaceholderIcon>\n              <PlaceholderIcon></PlaceholderIcon>\n              <StyledReplyIcon onClick={handleClick}>\n                <PlaceholderIcon></PlaceholderIcon>\n                <span id={id}>{t(\"reply\")}</span>\n              </StyledReplyIcon>\n              <StyledReportIcon>{t(\"report\")}</StyledReportIcon>\n            </ActionTab>\n            <ChatIcon>\n              <PlaceholderIcon></PlaceholderIcon>\n            </ChatIcon>\n          </Footer>\n          {clicked && selectedId === id && (\n            <form onSubmit={handleReply}>\n              <TextAreaField\n                name={REPLY}\n                placeholder={t(\"leave-a-comment\")}\n                onChange={() => null}\n              />\n              <StyledButton type=\"submit\" name={SUBMIT} value={t(\"reply\")} />\n            </form>\n          )}\n        </Content>\n      </Wrapper>\n    )\n  )\n}\n\nconst GetNestedThread = (item: Item) => {\n  const { t } = useTranslation()\n  const { text, time, author } = item\n  return (\n    text && (\n      <Wrapper\n        className={css`\n          padding-left: 40px;\n        `}\n        key={text}\n      >\n        <Header\n          className={css`\n            padding-top: 0 !important;\n          `}\n        >\n          <Author>\n            <PlaceholderAvatar></PlaceholderAvatar>\n            <span>{author}</span>\n          </Author>\n          <TimeLabel>{time}</TimeLabel>\n        </Header>\n        <Content>\n          <Text>{text}</Text>\n          <Footer>\n            <ActionTab>\n              <PlaceholderIcon></PlaceholderIcon>\n              <PlaceholderIcon></PlaceholderIcon>\n              <PlaceholderIcon></PlaceholderIcon>\n              <StyledReportIcon>{t(\"report\")}</StyledReportIcon>\n            </ActionTab>\n            <ChatIcon>\n              <PlaceholderIcon></PlaceholderIcon>\n            </ChatIcon>\n          </Footer>\n        </Content>\n      </Wrapper>\n    )\n  )\n}\n\nexport default Thread\n","import { css, cx } from \"@emotion/css\"\nimport { DetailedHTMLProps, InputHTMLAttributes } from \"react\"\n\nimport { baseTheme, primaryFont } from \"../../styles\"\n\n// eslint-disable-next-line i18next/no-literal-string\nconst labelClass = css`\n  /* font-family: system-ui, sans-serif; */\n  font-family: ${primaryFont};\n  font-size: 16px;\n  margin: 0.5rem 0.5rem 0.5rem 0;\n  line-height: 1;\n  display: grid;\n  grid-template-columns: 1em auto;\n  gap: 0.5em;\n\n  input[type=\"radio\"] {\n    appearance: none;\n    background-color: #fff;\n    margin: 0;\n    font: inherit;\n    width: 1.15em;\n    height: 1.15em;\n    border: 1.5px solid #787878;\n    border-radius: 50%;\n    transform: translateY(-0.075em);\n    display: grid;\n    place-content: center;\n  }\n\n  input[type=\"radio\"]::before {\n    content: \"\";\n    width: 0.65em;\n    height: 0.65em;\n    border-radius: 50%;\n    transform: scale(0);\n    transition: 120ms transform ease-in-out;\n    background-color: ${baseTheme.colors.green[600]};\n  }\n\n  span {\n    font-family: ${primaryFont};\n    font-weight: 400;\n    font-size: 18px;\n  }\n\n  input[type=\"radio\"]:checked::before {\n    transform: scale(1);\n    background: #1f6964;\n  }\n`\n\nexport interface RadioFieldProps\n  extends DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\n  label: string\n}\n\nconst RadioField = ({ onChange, className, label, ...rest }: RadioFieldProps) => {\n  return (\n    <div\n      className={cx(\n        css`\n          margin-bottom: 1rem;\n          margin-top: 1rem;\n        `,\n        className,\n      )}\n    >\n      <label className={cx(labelClass)}>\n        <input type=\"radio\" onChange={(event) => onChange && onChange(event)} {...rest} />\n        <span>{label}</span>\n      </label>\n    </div>\n  )\n}\n\nexport default RadioField\n","import { css, cx } from \"@emotion/css\"\nimport React, { forwardRef, TextareaHTMLAttributes, useEffect, useRef } from \"react\"\nimport { FieldError } from \"react-hook-form\"\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n  label?: string\n  errorMessage?: string\n  error?: string | FieldError\n  onChangeByValue?: (value: string, name?: string) => void\n  autoResize?: boolean\n  resize?: \"none\" | \"both\" | \"horizontal\" | \"vertical\" | \"block\" | \"inline\"\n}\n\nfunction updateHeight(ref: React.RefObject<HTMLTextAreaElement>) {\n  if (ref.current) {\n    // eslint-disable-next-line i18next/no-literal-string\n    ref.current.style.height = \"auto\"\n    // eslint-disable-next-line i18next/no-literal-string\n    ref.current.style.height = `${ref.current.scrollHeight + 5}px`\n  }\n}\n\nconst useCombinedRefs = (\n  fwdRef: React.ForwardedRef<HTMLTextAreaElement>,\n  innerRef: React.MutableRefObject<HTMLTextAreaElement | null>,\n) => {\n  React.useEffect(() => {\n    ;[innerRef, fwdRef].forEach((ref) => {\n      if (ref) {\n        if (typeof ref === \"function\") {\n          ref(innerRef.current || null)\n        } else {\n          ref.current = innerRef.current || null\n        }\n      }\n    })\n  }, [innerRef, fwdRef])\n  return innerRef\n}\nconst TextAreaField = forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  (\n    {\n      onChangeByValue,\n      onChange,\n      className,\n      autoResize,\n      resize = \"vertical\",\n      ...rest\n    }: TextAreaProps,\n    ref,\n  ) => {\n    const textareaRef = useRef<HTMLTextAreaElement>(null)\n    const combinedRef = useCombinedRefs(ref, textareaRef)\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      if (onChangeByValue) {\n        const {\n          target: { value },\n        } = event\n        onChangeByValue(value)\n      }\n      if (onChange) {\n        onChange(event)\n      }\n      if (autoResize) {\n        updateHeight(textareaRef)\n      }\n    }\n    useEffect(() => {\n      // This auto-resizes the textarea if the feature is enabled\n      if (!autoResize || !textareaRef.current) {\n        return\n      }\n      updateHeight(textareaRef)\n    }, [ref, rest.value, autoResize])\n    return (\n      <div\n        className={cx(\n          css`\n            margin-bottom: 1rem;\n\n            label {\n              display: grid;\n\n              textarea {\n                background: #fcfcfc;\n                border: 1.6px solid #dedede;\n                padding: 10px 12px;\n                resize: ${resize};\n              }\n              span {\n                color: #333;\n                font-size: 14px;\n                font-weight: 500;\n                margin-bottom: 0.2rem;\n              }\n            }\n          `,\n          className,\n        )}\n      >\n        <label>\n          <span>{rest.label}</span>\n          <textarea\n            ref={combinedRef}\n            onChange={handleOnChange}\n            /* onKeyPress={(event) => onKeyPress(event)} */\n            defaultValue={rest.defaultValue}\n            {...rest}\n          />\n        </label>\n      </div>\n    )\n  },\n)\n\nTextAreaField.displayName = \"TextAreaField\"\nexport default TextAreaField\n"],"names":[],"sourceRoot":""}