{"version":3,"file":"DebugModal-stories.7cf0ae41.iframe.bundle.js","mappings":";;;;;;;;AA6BA;;AAqCA;;AAQA;;AASA;AC6HA;AACA;AAGA;AACA;AA1HA;AA8HA;AACA;AAjGA;AAqGA;AACA;AAxEA;AA4EA;AACA;AAjDA;AAqDA;AACA;AA3JA;AA2KA;AAXA;AAWA;;;AC1OA;;;;;;;AASA;AAgBA;AACA;AACA;;AAEA;;;;;AAKA;;;;;;AAQA","sources":["webpack://shared-module/./src/components/DebugModal.tsx","webpack://shared-module/./src/components/Button.tsx","webpack://shared-module/./src/components/Spinner.tsx"],"sourcesContent":["import { css } from \"@emotion/css\"\nimport styled from \"@emotion/styled\"\nimport { faBug as faIcon } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { Dialog, Paper } from \"@mui/material\"\nimport { Dispatch, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport Button from \"./Button\"\nimport MonacoEditor from \"./monaco/MonacoEditor\"\n\nexport interface DebugModalProps {\n  data: unknown\n  readOnly?: boolean\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  updateDataOnClose?: Dispatch<any>\n  buttonSize?: \"small\" | \"medium\" | \"large\"\n}\n\nconst HeaderBar = styled.div`\n  display: flex;\n  padding: 0.5rem;\n  align-items: center;\n  h1 {\n    font-size: 1.25rem;\n    margin-bottom: 0;\n  }\n`\n\nconst DebugModal: React.FC<React.PropsWithChildren<React.PropsWithChildren<DebugModalProps>>> = ({\n  data,\n  readOnly = true,\n  updateDataOnClose,\n  buttonSize = \"medium\",\n}) => {\n  const { t } = useTranslation()\n  const [open, setOpen] = useState(false)\n  const [editedContent, setEditedContent] = useState<string | null>(null)\n\n  const closeModal = () => {\n    setOpen(false)\n    if (updateDataOnClose) {\n      let parsed = null\n      if (typeof editedContent === \"string\") {\n        parsed = JSON.parse(editedContent)\n      }\n      updateDataOnClose(parsed)\n    }\n  }\n\n  const openModal = () => {\n    setEditedContent(JSON.stringify(data, undefined, 2))\n    setOpen(true)\n  }\n\n  const readOnlySpecifier = readOnly ? t(\"read-only\") : t(\"editable\")\n\n  return (\n    <>\n      <Button\n        variant=\"blue\"\n        size={buttonSize}\n        aria-label={t(\"debug\")}\n        onClick={() => openModal()}\n        className={css`\n          color: white !important;\n        `}\n      >\n        <FontAwesomeIcon icon={faIcon} />\n      </Button>\n      <Dialog maxWidth=\"xl\" open={open} onClose={closeModal}>\n        <Paper\n          className={css`\n            overflow: hidden;\n          `}\n        >\n          <HeaderBar>\n            <h1>\n              {t(\"title-debug-view\")} ({readOnlySpecifier})\n            </h1>\n            <div\n              className={css`\n                flex-grow: 1;\n              `}\n            />\n            <Button variant=\"primary\" size=\"medium\" onClick={closeModal}>\n              {t(\"close\")}\n            </Button>\n          </HeaderBar>\n          <MonacoEditor\n            height=\"90vh\"\n            width=\"80vw\"\n            defaultLanguage=\"json\"\n            // eslint-disable-next-line i18next/no-literal-string\n            options={{ wordWrap: \"on\", readOnly }}\n            defaultValue={editedContent || undefined}\n            onChange={(value) => value && setEditedContent(value)}\n          />\n        </Paper>\n      </Dialog>\n    </>\n  )\n}\n\nexport default DebugModal\n","import styled from \"@emotion/styled\"\nimport React, { forwardRef, Ref } from \"react\"\n\nimport { baseTheme, fontWeights, headingFont, theme } from \"../styles\"\nimport { defaultFontSizePx } from \"../styles/constants\"\nimport { respondToOrLarger } from \"../styles/respond\"\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant: \"primary\" | \"secondary\" | \"reject\" | \"tertiary\" | \"outlined\" | \"blue\" | \"white\"\n  size: \"small\" | \"medium\" | \"large\"\n  transform?: \"capitalize\" | \"uppercase\" | \"none\" | \"lowercase\"\n  children?: React.ReactNode\n}\n\n// BaseButtonStyles is the primary button\nexport const BASE_BUTTON_STYLES = `\n  position: relative;\n  display: inline-block;\n  padding: ${theme.buttonSizes[\"large\"].padding};\n  font-family: ${headingFont};\n  font-weight: ${fontWeights.normal};\n  font-size: ${defaultFontSizePx}px;\n  line-height: normal;\n  vertical-align: baseline;\n  cursor: pointer;\n  user-select: none;\n  text-decoration: none;\n  text-align: center;\n  justify-content: center;\n  text-transform: uppercase;\n  letter-spacing: 0.02em;\n  transition: all 150ms linear;\n  border: 2.5px solid transparent;\n  z-index: 1;\n  white-space: nowrap;\n\n  color: ${theme.primary.text};\n  background-color: ${theme.primary.bg};\n  border-color: ${theme.primary.border};\n\n  &:hover {\n    color: ${theme.primary.hoverBorder};\n    background-color: ${theme.primary.hoverBg};\n    border-color: ${theme.primary.hoverBorder};\n    text-decoration: none;\n  }\n\n  &:active {\n    color: ${theme.primary.hoverText};\n    background-color: ${theme.primary.activeBg};\n    border-color: ${theme.primary.hoverBorder};\n  }\n\n  &:disabled {\n    color: ${theme.primary.disabledText};\n    background-color: ${theme.primary.disabledBg};\n    border-color: ${theme.primary.disabledBorder};\n    cursor: not-allowed;\n  }\n\n  &:focus {\n    text-decoration: none;\n  }\n\n\n  ${respondToOrLarger.sm} {\n    white-space: nowrap;\n  }\n`\n\nexport const PrimaryButtonStyles = (props: ButtonProps) => {\n  const PRIMARY_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n  `\n  return PRIMARY_BUTTON_STYLES\n}\n\nexport const WhiteButtonStyles = (props: ButtonProps) => {\n  const WHITE_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.white.text};\n    background: #FCFCFC;\n    border: 1.5px solid #DEDEDE;\n\n  `\n  return WHITE_BUTTON_STYLES\n}\n\nexport const SecondaryButtonStyles = (props: ButtonProps) => {\n  const SECONDARY_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.secondary.text};\n    background: ${theme.secondary.bg};\n    border: 1.5px solid ${theme.secondary.border};\n\n    &:hover,\n    &:focus {\n      color: ${theme.secondary.hoverText};\n      box-shadow: 0 0 0 1px ${theme.secondary.text};\n      border: 1.5px solid ${theme.secondary.text};\n    }\n\n    &:active {\n      color: ${theme.secondary.hoverText};\n      background-color: ${theme.secondary.activeBg};\n    }\n\n    &:disabled {\n      color: ${theme.secondary.disabledText};\n      background-color: ${theme.secondary.disabledBg};\n      border-color: ${theme.secondary.disabledBorder};\n    }\n  `\n  return SECONDARY_BUTTON_STYLES\n}\n\nexport const RejectButtonStyles = (props: ButtonProps) => {\n  const REJECT_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.reject.text};\n    background: ${theme.reject.bg};\n    border: 1.5px solid ${theme.reject.border};\n\n    &:hover,\n    &:focus {\n      color: ${theme.reject.hoverText};\n      box-shadow: 0 0 0 1px ${theme.reject.text};\n      border: 1.5px solid ${theme.reject.text};\n    }\n\n    &:active {\n      color: ${theme.reject.hoverText};\n      background-color: ${theme.reject.activeBg};\n    }\n\n    &:disabled {\n      color: ${theme.reject.disabledText};\n      background-color: ${theme.reject.disabledBg};\n      border-color: ${theme.reject.disabledBorder};\n    }\n  `\n  return REJECT_BUTTON_STYLES\n}\n\nexport const TertiaryButtonStyles = (props: ButtonProps) => {\n  const TERTIARY_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.tertiary.text};\n    background-color: ${theme.tertiary.bg};\n    border: unset;\n\n    &:hover {\n      color: ${theme.tertiary.hoverText};\n      background-color: ${theme.tertiary.hoverBg};\n    }\n\n    &:active {\n      color: ${theme.tertiary.hoverText};\n      background-color: ${theme.tertiary.activeBg};\n    }\n\n    &:disabled {\n      color: ${theme.tertiary.disabledText};\n      background-color: ${theme.tertiary.disabledBg};\n      border-color: ${theme.tertiary.disabledBorder};\n    }\n  `\n  return TERTIARY_BUTTON_STYLES\n}\n\nexport const BlueButtonStyles = (props: ButtonProps) => {\n  const BLUE_BUTTON_STYLES = `\n    text-transform: ${props.transform};\n    padding: ${theme.buttonSizes[props.size].padding};\n\n    color: ${theme.tertiary.text};\n    background-color: ${baseTheme.colors.blue[500]};\n    border: unset;\n    border: 2px solid ${theme.secondary.border};\n\n    &:hover {\n      border: 2px solid ${baseTheme.colors.blue[600]};\n      color: ${baseTheme.colors.blue[700]};\n    }\n\n    &:active {\n      border: 2px solid ${baseTheme.colors.blue[400]};\n    }\n\n    &:disabled {\n      color: ${theme.secondary.disabledText};\n      background-color: ${theme.secondary.disabledBg};\n      border-color: ${theme.secondary.disabledBorder};\n    }\n  `\n  return BLUE_BUTTON_STYLES\n}\n\nconst PrimaryButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${PrimaryButtonStyles}\n`\n\nconst SecondaryButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${SecondaryButtonStyles}\n`\n\nconst RejectButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${RejectButtonStyles}\n`\n\nconst TertiaryButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${TertiaryButtonStyles}\n`\n\nconst BlueButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${BlueButtonStyles}\n`\n\nconst WhiteButton = styled.button`\n  ${BASE_BUTTON_STYLES}\n  ${WhiteButtonStyles}\n`\n\nexport const LabelButton = styled.label`\n  ${BASE_BUTTON_STYLES}\n`\n\n/* BUTTON VARIANT\nPrimaryButton\nSecondaryButton\nGhostButton\nTertiaryButton\nIconButton\nLink */\n\nconst Button = forwardRef((props: ButtonProps, ref?: Ref<HTMLButtonElement>) => {\n  switch (props.variant) {\n    case \"primary\":\n      return <PrimaryButton ref={ref} {...props} />\n    case \"secondary\":\n      return <SecondaryButton ref={ref} {...props} />\n    case \"reject\":\n      return <RejectButton ref={ref} {...props} />\n    case \"tertiary\":\n      return <TertiaryButton ref={ref} {...props} />\n    case \"outlined\":\n      return <SecondaryButton ref={ref} {...props} />\n    case \"blue\":\n      return <BlueButton ref={ref} {...props} />\n    case \"white\":\n      return <WhiteButton ref={ref} {...props} />\n    default:\n      return <PrimaryButton ref={ref} {...props} />\n  }\n})\n\n// eslint-disable-next-line i18next/no-literal-string\nButton.displayName = \"Button\"\n\nexport default Button\n","/* eslint-disable i18next/no-literal-string */\nimport { keyframes } from \"@emotion/react\"\nimport styled from \"@emotion/styled\"\n\nimport { baseTheme } from \"../styles\"\n\nexport interface SpinnerProps {\n  variant: \"large\" | \"medium\" | \"small\"\n  disableMargin?: boolean\n}\nconst rotation = keyframes`\n  0% { transform: rotate(0deg) }\n  100% { transform: rotate(360deg) }\n`\n\nconst fadeIn = keyframes`\n0% {\n  opacity: 0;\n}\n100% {\n  opacity: 1;\n}\n`\n\nconst variantSizes = {\n  small: {\n    width: \"16px\",\n    height: \"16px\",\n  },\n  medium: {\n    width: \"30px\",\n    height: \"30px\",\n  },\n  large: {\n    width: \"42px\",\n    height: \"42px\",\n  },\n}\n\nconst StyledSpinner = styled.div<SpinnerProps>`\n  margin: ${(props) => (props.disableMargin ? \"0\" : \"1rem\")};\n  width: ${(props) => variantSizes[props.variant].width};\n  height: ${(props) => variantSizes[props.variant].height};\n  border: 5px solid #f1f1f1;\n  border-bottom-color: ${baseTheme.colors.green[500]};\n  border-radius: 50%;\n  display: inline-block;\n  /** Showing the spinner is delayed because showing a spinner for a moment on fast transitions makes the application to feel like more slow than it is **/\n  opacity: 0;\n  animation-name: ${rotation}, ${fadeIn};\n  animation-duration: 1s, 600ms;\n  animation-timing-function: linear, ease;\n  animation-iteration-count: infinite, 1;\n  animation-delay: 400ms;\n  animation-fill-mode: forwards;\n`\n\nconst Spinner = (props: SpinnerProps) => {\n  return <StyledSpinner {...props}></StyledSpinner>\n}\n\nexport default Spinner\n"],"names":[],"sourceRoot":""}